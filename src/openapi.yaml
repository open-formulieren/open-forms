openapi: 3.0.3
info:
  title: Open Forms API
  version: 1.0.0-alpha
  description: |2

    Open Forms provides an API to manage multi-page or multi-step forms.

    It supports listing and retrieving forms, which are made up of form steps. Each form
    step has a form definition driven by [FormIO.js](https://github.com/formio/formio.js/)
    definitions.

    Submissions of forms are supported, where each form step can be submitted individually.
    Complete submissions are sent to the configured backend, which is a pluggable system
    to hook into [Open Zaak](https://openzaak.org), [Camunda](https://camunda.com/) or
    other systems.

    Open Forms fits in the [Common Ground](https://commonground.nl) vision and architecture,
    and it plays nice with other available components.
  contact:
    url: https://github.com/maykinmedia/open-forms
    email: support@maykinmedia.nl
  license:
    name: UNLICENSED
paths:
  /api/v1/appointments/{submission_uuid}/cancel:
    post:
      operationId: appointments_cancel_create
      summary: Cancel an appointment
      parameters:
      - in: path
        name: submission_uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - appointments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelAppointmentInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CancelAppointmentInput'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CancelAppointmentInput'
        required: true
      responses:
        '204':
          description: No response body
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Unable to verify ownership of the appointment.
        '502':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Unable to cancel appointment.
  /api/v1/appointments/dates:
    get:
      operationId: appointments_dates_list
      description: |-
        List all dates for a given product.

        Note that you must include valid querystring parameters to get actual results. If
        you don't, then an empty list is returned.
      summary: List available dates for a given location and product
      parameters:
      - in: query
        name: location_id
        schema:
          type: string
        description: ID of the location
        required: true
      - in: query
        name: product_id
        schema:
          type: string
        description: ID of the product
        required: true
      tags:
      - appointments
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Date'
          description: ''
  /api/v1/appointments/locations:
    get:
      operationId: appointments_locations_list
      description: |-
        List all locations for a given product.

        Note that you must include valid querystring parameters to get actual results. If
        you don't, then an empty list is returned.
      summary: List available locations for a given product
      parameters:
      - in: query
        name: product_id
        schema:
          type: string
        description: ID of the product
        required: true
      tags:
      - appointments
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
          description: ''
  /api/v1/appointments/products:
    get:
      operationId: appointments_products_list
      description: List all products a user can choose when making an appointment.
      summary: List available products
      tags:
      - appointments
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentProduct'
          description: ''
  /api/v1/appointments/times:
    get:
      operationId: appointments_times_list
      description: |-
        List all times for a given product.

        Note that you must include valid querystring parameters to get actual results. If
        you don't, then an empty list is returned.
      summary: List available times for a given location, product, and date
      parameters:
      - in: query
        name: date
        schema:
          type: string
          format: date
        description: The date
        required: true
      - in: query
        name: location_id
        schema:
          type: string
        description: ID of the location
        required: true
      - in: query
        name: product_id
        schema:
          type: string
        description: ID of the product
        required: true
      tags:
      - appointments
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Time'
          description: ''
  /api/v1/authentication/plugins:
    get:
      operationId: authentication_plugins_list
      description: |-
        List all authentication plugins that have been registered.

        Each authentication plugin is tied to a particular (third-party) authentication
        provider. An authentication plugin usually provides a particular authentication
        attribute, such as the ``BSN`` or Chamber of Commerce number. A plugin may provide
        zero, one or multiple authentication attributes.
      summary: List available authentication plugins
      tags:
      - authentication
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthPlugin'
          description: ''
  /api/v1/authentication/session:
    delete:
      operationId: authentication_session_destroy
      description: Calling this endpoint will clear the current user session and delete
        the session cookie.
      summary: Delete session
      tags:
      - authentication
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/config/privacy_policy_info:
    get:
      operationId: config_privacy_policy_info_retrieve
      summary: Privacybeleid informatie
      tags:
      - config
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivacyPolicyInfo'
          description: ''
  /api/v1/form-definitions:
    get:
      operationId: form_definitions_list
      summary: List form step definitions
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - forms
      - form-definitions
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFormDefinitionList'
          description: ''
    post:
      operationId: form_definitions_create
      summary: Create a form definition
      tags:
      - forms
      - form-definitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormDefinition'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDefinition'
          description: ''
  /api/v1/form-definitions/{uuid}:
    get:
      operationId: form_definitions_retrieve
      summary: Retrieve form step definition details
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      - form-definitions
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDefinitionDetail'
          description: ''
    put:
      operationId: form_definitions_update
      summary: Update all details of a form definition
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      - form-definitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormDefinition'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDefinition'
          description: ''
    patch:
      operationId: form_definitions_partial_update
      summary: Update some details of a form definition
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      - form-definitions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFormDefinition'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormDefinition'
          description: ''
    delete:
      operationId: form_definitions_destroy
      summary: Delete a form definition
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      - form-definitions
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/form-definitions/{uuid}/configuration:
    get:
      operationId: form_definitions_configuration_retrieve
      description: |-
        Return the raw FormIO.js configuration definition.

        This excludes all the meta-data and just returns the JSON schema blob. In
        theory, this can be fed directly to a FormIO.js renderer, but note that there
        may be custom field types in play.
      summary: Retrieve form definition JSON schema
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/forms:
    get:
      operationId: forms_list
      description: List the active forms, including the pointers to the form steps.
        Form steps are included in order as they should appear.
      summary: List forms
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Form'
          description: ''
    post:
      operationId: forms_create
      description: |-
        Manage forms.

        Forms are collections of form steps, where each form step points to a formio.js
        form definition. Multiple definitions are combined in logical steps to build a
        multi-step/page form for end-users to fill out. Form definitions can be (and are)
        re-used among different forms.
      summary: Create form
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Form'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Form'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
          description: ''
  /api/v1/forms-import:
    post:
      operationId: forms_import_create
      description: |-
        Import a Form by uploading a .zip file containing a Form, FormDefinitions
        and FormSteps
      summary: Import form
      tags:
      - forms
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FormImport'
        required: true
      security:
      - tokenAuth: []
      responses:
        '204':
          content:
            application/json:
              schema:
                description: No response body
          description: ''
  /api/v1/forms/{form_uuid_or_slug}/steps:
    get:
      operationId: forms_steps_list
      summary: List form steps
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormStep'
          description: ''
    post:
      operationId: forms_steps_create
      summary: Create a form step
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormStep'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormStep'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormStep'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormStep'
          description: ''
  /api/v1/forms/{form_uuid_or_slug}/steps/{uuid}:
    get:
      operationId: forms_steps_retrieve
      summary: Retrieve form step details
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormStep'
          description: ''
    put:
      operationId: forms_steps_update
      summary: Update all details of a form step
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormStep'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormStep'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormStep'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormStep'
          description: ''
    patch:
      operationId: forms_steps_partial_update
      summary: Update some details of a form step
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFormStep'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFormStep'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFormStep'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormStep'
          description: ''
    delete:
      operationId: forms_steps_destroy
      summary: Delete a form step
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/forms/{form_uuid_or_slug}/versions:
    get:
      operationId: forms_versions_list
      summary: List form versions
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifying the form.
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormVersion'
          description: ''
    post:
      operationId: forms_versions_create
      description: Save the current version of the form so that it can later be retrieved
      summary: Save form version
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifying the form.
        required: true
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormVersion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormVersion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormVersion'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormVersion'
          description: ''
  /api/v1/forms/{form_uuid_or_slug}/versions/{uuid}/restore:
    post:
      operationId: forms_versions_restore_create
      description: Restore a previously saved version of a form.
      summary: Restore form version
      parameters:
      - in: path
        name: form_uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifying the form.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
        description: The UUID of the form version
        required: true
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormVersion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormVersion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormVersion'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/forms/{uuid_or_slug}:
    get:
      operationId: forms_retrieve
      description: |-
        Manage forms.

        Forms are collections of form steps, where each form step points to a formio.js
        form definition. Multiple definitions are combined in logical steps to build a
        multi-step/page form for end-users to fill out. Form definitions can be (and are)
        re-used among different forms.
      summary: Retrieve form details
      parameters:
      - in: path
        name: uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
          description: ''
    put:
      operationId: forms_update
      description: |-
        Manage forms.

        Forms are collections of form steps, where each form step points to a formio.js
        form definition. Multiple definitions are combined in logical steps to build a
        multi-step/page form for end-users to fill out. Form definitions can be (and are)
        re-used among different forms.
      summary: Update all details of a form
      parameters:
      - in: path
        name: uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Form'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Form'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Form'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
          description: ''
    patch:
      operationId: forms_partial_update
      description: |-
        Manage forms.

        Forms are collections of form steps, where each form step points to a formio.js
        form definition. Multiple definitions are combined in logical steps to build a
        multi-step/page form for end-users to fill out. Form definitions can be (and are)
        re-used among different forms.
      summary: Update given details of a form
      parameters:
      - in: path
        name: uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedForm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedForm'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
          description: ''
    delete:
      operationId: forms_destroy
      description: Destroying a form leads to a soft-delete to protect related submissions.
        These deleted forms are no longer visible in the API endpoints.
      summary: Mark form as deleted
      parameters:
      - in: path
        name: uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/forms/{uuid_or_slug}/admin-message:
    post:
      operationId: forms_admin_message_create
      description: |-
        Prepare the relevant message to be displayed in the admin.

        On form create/update, a success message is displayed to the end user on
        page reload. This exact message varies with the type of submit action that was
        performed and whether the object was created or updated.

        This endpoint is only available for staff users and prepares messages for display
        in the admin environment.
      summary: Prepare form edit admin message
      parameters:
      - in: path
        name: uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormAdminMessage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormAdminMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormAdminMessage'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormAdminMessage'
          description: ''
  /api/v1/forms/{uuid_or_slug}/copy:
    post:
      operationId: forms_copy_create
      description: |-
        Create a copy of a form.

        Copying a form copies the meta-data of the form and the steps included.
        Referenced form definitions inside the form steps are re-used instead of
        new copies being created.
      summary: Copy form
      parameters:
      - in: path
        name: uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      responses:
        '201':
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL of the created resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Form'
          description: ''
  /api/v1/forms/{uuid_or_slug}/export:
    post:
      operationId: forms_export_create
      description: |-
        Export a form with the related steps and form definitions as a ZIP-file.

        The exported ZIP-file can be used to import complete forms.
      summary: Export form
      parameters:
      - in: path
        name: uuid_or_slug
        schema:
          type: string
        description: Either a UUID4 or a slug identifiying the form.
        required: true
      tags:
      - forms
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/zip:
              schema:
                type: string
                format: binary
          description: ''
  /api/v1/location/get-street-name-and-city:
    get:
      operationId: get_street_name_and_city_list
      description: Get the street name and city for a given postal code and house
        number
      summary: Get a street name and city
      parameters:
      - in: query
        name: house_number
        schema:
          type: number
        description: House number of the address
        required: true
      - in: query
        name: postcode
        schema:
          type: string
        description: Postal code of the address
        required: true
      tags:
      - location
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStreetNameAndCityViewResult'
          description: ''
  /api/v1/logic-rules:
    get:
      operationId: logic_rules_list
      summary: List logic rules
      parameters:
      - in: query
        name: form
        schema:
          type: string
          format: uuid
        description: De UUID van het formulier gekoppeld aan deze logicaregels.
      tags:
      - logic-rules
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormLogic'
          description: ''
    post:
      operationId: logic_rules_create
      summary: Create a logic rule
      tags:
      - logic-rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormLogic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormLogic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormLogic'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormLogic'
          description: ''
  /api/v1/logic-rules/{uuid}:
    get:
      operationId: logic_rules_retrieve
      summary: Retrieve logic rule details
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormLogic'
          description: ''
    put:
      operationId: logic_rules_update
      summary: Update all details of a logic rule
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormLogic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormLogic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormLogic'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormLogic'
          description: ''
    patch:
      operationId: logic_rules_partial_update
      summary: Update some details of a logic rule
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFormLogic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFormLogic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFormLogic'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormLogic'
          description: ''
    delete:
      operationId: logic_rules_destroy
      summary: Delete a logic rule
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/payment/plugins:
    get:
      operationId: payment_plugins_list
      description: |-
        List all payment plugins that have been registered.

        Each payment plugin is tied to a particular (third-party) payment
        provider.
      summary: List available payment plugins
      tags:
      - payment
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentPlugin'
          description: ''
  /api/v1/prefill/plugins:
    get:
      operationId: prefill_plugins_list
      description: List all prefill plugins that have been registered.
      summary: List available prefill plugins
      tags:
      - prefill
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrefillPlugin'
          description: ''
  /api/v1/prefill/plugins/{plugin}/attributes:
    get:
      operationId: prefill_plugins_attributes_list
      description: List the available prefill attributes for a given plugin.
      summary: List available attributes
      parameters:
      - in: path
        name: plugin
        schema:
          type: string
        required: true
      tags:
      - prefill
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrefillAttribute'
          description: ''
  /api/v1/price-rules:
    get:
      operationId: price_rules_list
      summary: List pricing logic rules
      parameters:
      - in: query
        name: form
        schema:
          type: string
          format: uuid
        description: De UUID van het formulier gekoppeld aan deze logicaregels.
      tags:
      - logic-rules
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FormPriceLogic'
          description: ''
    post:
      operationId: price_rules_create
      summary: Create a pricing logic rule
      tags:
      - logic-rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormPriceLogic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormPriceLogic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormPriceLogic'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormPriceLogic'
          description: ''
  /api/v1/price-rules/{uuid}:
    get:
      operationId: price_rules_retrieve
      summary: Retrieve pricing logic rule details
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormPriceLogic'
          description: ''
    put:
      operationId: price_rules_update
      summary: Update all details of a pricing logic rule
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormPriceLogic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FormPriceLogic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FormPriceLogic'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormPriceLogic'
          description: ''
    patch:
      operationId: price_rules_partial_update
      summary: Update some details of a pricing logic rule
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFormPriceLogic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFormPriceLogic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFormPriceLogic'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormPriceLogic'
          description: ''
    delete:
      operationId: price_rules_destroy
      summary: Delete a pricing logic rule
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - logic-rules
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/products:
    get:
      operationId: products_list
      description: |-
        List and retrieve the products registered in the admin interface.

        Note that these endpoints are only available to authenticated admin users. The
        products functionality is minimal to be able to register prices. In the future,
        probably a dedicated products catalogue will become relevant.
      summary: List available products
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/products/{uuid}:
    get:
      operationId: products_retrieve
      description: |-
        List and retrieve the products registered in the admin interface.

        Note that these endpoints are only available to authenticated admin users. The
        products functionality is minimal to be able to register prices. In the future,
        probably a dedicated products catalogue will become relevant.
      summary: Retrieve details of a single product
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
          description: Globally unique identifier
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/registration/attributes:
    get:
      operationId: registration_attributes_list
      description: List the available registration attributes.
      summary: List available registration attributes
      tags:
      - registration
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationAttribute'
          description: ''
  /api/v1/registration/plugins:
    get:
      operationId: registration_plugins_list
      description: |-
        List all available registration plugins.

        Registration plugins are responsible for the implementation details to register the form submission
        with various backends, such as "API's voor zaakgericht werken", StUF-ZDS and others.
      summary: List available registration plugins
      tags:
      - registration
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegistrationPlugin'
          description: ''
  /api/v1/registration/plugins/camunda/process-definitions:
    get:
      operationId: registration_plugins_camunda_process_definitions_list
      description: List the available process definitions & their versions.
      summary: List available Camunda process definitions
      tags:
      - registration
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessDefinition'
          description: ''
  /api/v1/submissions:
    get:
      operationId: submissions_list
      description: Active submissions are submissions whose ID is in the user session.
        This endpoint returns user-bound submissions. Note that you get different
        results on different results because of the differing sessions.
      summary: List active submissions
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubmissionList'
          description: ''
    post:
      operationId: submissions_create
      description: Start a submission for a particular form. The submission is added
        to the user session.
      summary: Start a submission
      tags:
      - submissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Submission'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Submission'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          description: ''
  /api/v1/submissions/{report_id}/{token}/download:
    get:
      operationId: submissions_download_retrieve
      description: Download het document met de ingezonden gegevens, in PDF vorm.
        Dit document kan alleen worden opgevraagd indien het juiste token is meegegeven,
        die hoort bij de formulier sessie. Nadat het document is gedownload, of na
        1 dagen, is het token niet meer te gebruiken.
      summary: Download the PDF report
      parameters:
      - in: path
        name: report_id
        schema:
          type: integer
        required: true
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/pdf:
              schema:
                type: string
                format: binary
          description: ''
  /api/v1/submissions/{submission_uuid}/steps/{step_uuid}:
    get:
      operationId: submissions_steps_retrieve
      description: The details of a particular submission step always return the related
        form step configuration. If there is no data yet for the step, the ID will
        be `null`. Set the step data by making a `PUT` request.
      summary: Retrieve step details
      parameters:
      - in: path
        name: step_uuid
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: submission_uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionStep'
          description: ''
    put:
      operationId: submissions_steps_update
      description: |-
        The submission data is either created or updated, depending on whether there was
        submission data present before or not. Make sure to retrieve the step data to
        display already filled out fields.

        Note that the form step configuration is currently not validated - this may change
        in the future. I.e. - a step that is marked as not available will still be submitted
        at the time being.
      summary: Store submission step data
      parameters:
      - in: path
        name: step_uuid
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: submission_uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionStep'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionStep'
          description: ''
  /api/v1/submissions/{submission_uuid}/steps/{step_uuid}/_check_logic:
    post:
      operationId: submissions_steps__check_logic_create
      description: Apply/check the logic rules specified on the form step.
      summary: Apply/check form logic
      parameters:
      - in: path
        name: step_uuid
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: submission_uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormData'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionStateLogic'
          description: ''
  /api/v1/submissions/{uuid}:
    get:
      operationId: submissions_retrieve
      description: Get the state of a single submission in the user session.
      summary: Retrieve submission details
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
          description: ''
  /api/v1/submissions/{uuid}/{token}/status:
    get:
      operationId: submissions_status_retrieve
      description: |-
        Obtain the current submission processing status, after completing it.

        The submission is processed asynchronously. Poll this endpoint to receive
        information on the status of this async processing.
      summary: Get the submission processing status
      parameters:
      - in: path
        name: token
        schema:
          type: string
        description: Time-based authentication token
        required: true
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionProcessingStatus'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: ''
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: ''
  /api/v1/submissions/{uuid}/_complete:
    post:
      operationId: submissions__complete_create
      description: |-
        Mark the submission as completed.

        Submission completion requires that all required steps are completed.

        Note that the processing of the submission runs in the background, and you
        should periodically check the submission status endpoint to check the state.
        Background processing makes sure that:

        * potential appointments are registered
        * a report PDF is generated
        * the submission is persisted to the configured backend
        * payment is initiated if relevant

        Once a submission is completed, it's removed from the submission and time-stamped
        HMAC token URLs are used for subsequent process flow. This means it's no longer
        possible to change or read the submission data (including individual steps).
        This guarantees that the submission is removed from the session without having
        to rely on the client being able to make another call. IF it is detected in the
        status endpoint that a retry is needed, the ID is added back to the session.
      summary: Complete a submission
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionCompletion'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionValidation'
          description: ''
  /api/v1/submissions/{uuid}/_suspend:
    post:
      operationId: submissions__suspend_create
      description: |-
        Suspend the submission.

        Submission suspension requires contact details to send the end-user a URL to
        resume the submission (possibly from another device).
      summary: Suspend a submission
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionSuspension'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubmissionSuspension'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubmissionSuspension'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionSuspension'
          description: ''
  /api/v1/submissions/{uuid}/co-sign:
    get:
      operationId: submissions_co_sign_retrieve
      description: Retrieve co-sign state.
      summary: Retrieve co-sign state
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionCoSignStatus'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: ''
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: ''
  /api/v1/submissions/files/{uuid}:
    get:
      operationId: submissions_files_retrieve
      description: |-
        Haal tijdelijk bestand op.

        Deze aanroep wordt gedaan door het standaard Form.io bestandsupload widget.

        Toegang tot dit endpoint vereist een actieve formulier inzending. Niet gekoppelde bestanden worden automatisch verwijderd na 2 dag(en)
      summary: Retrieve temporary file upload
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          description: ''
    delete:
      operationId: submissions_files_destroy
      description: "Delete temporary file upload by the uploader. \n\nThis is called\
        \ by the default Form.io file upload widget. \n\nAccess to this view requires\
        \ an active form submission. Unclaimed temporary files automatically expire\
        \ after {expire_days} day(s). "
      summary: Delete temporary file upload
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - submissions
      responses:
        '204':
          description: No response body
  /api/v1/submissions/files/upload:
    post:
      operationId: submissions_files_upload_create
      description: |-
        Bestandsupload handler voor jet Form.io bestandsupload opslagtype 'url'.

        Bestandsuploads worden tijdelijke opgeslagen en moeten gekoppeld worden aan een inzending.

        Toegang tot dit endpoint vereist een actieve formulier inzending. Niet gekoppelde bestanden worden automatisch verwijderd na 2 dag(en)
      summary: Create temporary file upload
      tags:
      - submissions
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemporaryFileUpload'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemporaryFileUpload'
          description: ''
  /api/v1/translations/formio:
    get:
      operationId: translations_formio_retrieve
      description: Retrieve the translations for the strings used by FormIO
      summary: Get FormIO translations
      tags:
      - translations
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/validation/plugins:
    get:
      operationId: validation_plugins_list
      description: List all prefill plugins that have been registered.
      summary: List available validation plugins
      tags:
      - validation
      security:
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationPlugin'
          description: ''
  /api/v1/validation/plugins/{validator}:
    post:
      operationId: validation_run
      description: Validate a value using given validator
      summary: Validate value using validation plugin
      parameters:
      - in: path
        name: validator
        schema:
          type: string
          enum:
          - kvk-branchNumber
          - kvk-kvkNumber
          - kvk-rsin
        description: ID of the validation plugin, see the [`validation_plugin_list`](./#operation/validation_plugin_list)
          operation
        required: true
      tags:
      - validation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ValidationInput'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ValidationInput'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
          description: ''
  /auth/{slug}/{plugin_id}/return:
    get:
      operationId: auth_return_retrieve
      description: |-
        Authentication plugins call this endpoint in the return step of the authentication flow. Depending on the plugin, either `GET` or `POST` is allowed as HTTP method.

        Typically authentication plugins will redirect again to the URL where the SDK is embedded.

        Various validations are performed:
        * the form must be live
        * the `plugin_id` is configured on the form
        * logging in is required on the form
        * the redirect target must match the CORS policy
      summary: Return from external login flow
      parameters:
      - in: query
        name: coSignSubmission
        schema:
          type: string
          format: uuid
        description: UUID of the submission for which this co-sign authentication
          applies. Presence of this parameter marks a flow as a co-sign flow.
      - in: path
        name: plugin_id
        schema:
          type: string
        description: Identifier of the authentication plugin.
        required: true
      - in: path
        name: slug
        schema:
          type: string
        description: Slug identifiying the form.
        required: true
      tags:
      - auth
      security:
      - {}
      responses:
        '302':
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL where the SDK initiated the authentication flow.
              required: true
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          description: No response body
        '400':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            text/html:
              schema:
                type: string
          description: Bad request. Invalid parameters were passed.
        '404':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            text/html:
              schema:
                type: string
          description: Not found. The slug did not point to a live form.
        '405':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            text/html:
              schema:
                type: string
          description: Method not allowed. The authentication plugin requires `POST`
            or `GET`, and the wrong method was used.
    post:
      operationId: auth_return_create
      description: |-
        Authentication plugins call this endpoint in the return step of the authentication flow. Depending on the plugin, either `GET` or `POST` is allowed as HTTP method.

        Typically authentication plugins will redirect again to the URL where the SDK is embedded.

        Various validations are performed:
        * the form must be live
        * the `plugin_id` is configured on the form
        * logging in is required on the form
        * the redirect target must match the CORS policy
      summary: Return from external login flow
      parameters:
      - in: query
        name: coSignSubmission
        schema:
          type: string
          format: uuid
        description: UUID of the submission for which this co-sign authentication
          applies. Presence of this parameter marks a flow as a co-sign flow.
      - in: path
        name: plugin_id
        schema:
          type: string
        description: Identifier of the authentication plugin.
        required: true
      - in: path
        name: slug
        schema:
          type: string
        description: Slug identifiying the form.
        required: true
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
      security:
      - {}
      responses:
        '200':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            text/html:
              schema:
                type: string
          description: OK. Possibly a form with validation errors is rendered.
        '302':
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL where the SDK initiated the authentication flow.
              required: true
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          description: No response body
        '400':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            text/html:
              schema:
                type: string
          description: Bad request. Invalid parameters were passed.
        '404':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            text/html:
              schema:
                type: string
          description: Not found. The slug did not point to a live form.
        '405':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            text/html:
              schema:
                type: string
          description: Method not allowed. The authentication plugin requires `POST`
            or `GET`, and the wrong method was used.
  /auth/{slug}/{plugin_id}/start:
    get:
      operationId: auth_start_retrieve
      description: |-
        This endpoint is the internal redirect target to start external login flow.

        Note that this is NOT a JSON 'endpoint', but rather the browser should be redirected to this URL and will in turn receive another redirect.

        Various validations are performed:
        * the form must be live
        * the `plugin_id` is configured on the form
        * logging in is required on the form
        * the `next` parameter must be present
        * the `next` parameter must match the CORS policy
      summary: Start authentication flow
      parameters:
      - in: query
        name: coSignSubmission
        schema:
          type: string
          format: uuid
        description: UUID of the submission for which this co-sign authentication
          applies. Presence of this parameter marks a flow as a co-sign flow.
      - in: query
        name: next
        schema:
          type: string
          format: uri
        description: URL of the form to redirect back to. This URL is validated against
          the CORS configuration.
        required: true
      - in: path
        name: plugin_id
        schema:
          type: string
        description: Identifier of the authentication plugin. Note that this is validated
          against the configured available plugins for this particular form.
        required: true
      - in: path
        name: slug
        schema:
          type: string
        description: Slug identifiying the form.
        required: true
      tags:
      - auth
      security:
      - {}
      responses:
        '200':
          content:
            text/html:
              schema:
                type: string
          description: OK. A login page is rendered.
        '302':
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL of the external authentication service where the end-user
                will be redirected to. The value is specific to the selected authentication
                plugin.
              required: true
          description: No response body
        '400':
          content:
            text/html:
              schema:
                type: string
          description: Bad request. Invalid parameters were passed.
        '404':
          content:
            text/html:
              schema:
                type: string
          description: Not found. The slug did not point to a live form.
  /payment/{plugin_id}/webhook:
    get:
      operationId: payment_webhook_retrieve
      description: |-
        This endpoint is used for server-to-server calls. Depending on the plugin, either `GET` or `POST` is allowed as HTTP method.

        Various validations are performed:
        * the `plugin_id` is configured on the form
        * payment is required and configured on the form
      summary: Webhook handler for external payment flow
      parameters:
      - in: path
        name: plugin_id
        schema:
          type: string
        description: Identifier of the payment plugin. Note that this is validated
          against the configured available plugins for this particular form.
        required: true
      tags:
      - payment
      security:
      - {}
      responses:
        '200':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          description: No response body
        '400':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Bad request. Invalid parameters were passed.
        '404':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Not found. The slug did not point to a live plugin.
    post:
      operationId: payment_webhook_create
      description: |-
        This endpoint is used for server-to-server calls. Depending on the plugin, either `GET` or `POST` is allowed as HTTP method.

        Various validations are performed:
        * the `plugin_id` is configured on the form
        * payment is required and configured on the form
      summary: Webhook handler for external payment flow
      parameters:
      - in: path
        name: plugin_id
        schema:
          type: string
        description: Identifier of the payment plugin. Note that this is validated
          against the configured available plugins for this particular form.
        required: true
      tags:
      - payment
      security:
      - {}
      responses:
        '200':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          description: No response body
        '400':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Bad request. Invalid parameters were passed.
        '404':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Not found. The slug did not point to a live plugin.
  /payment/{uuid}/{plugin_id}/start:
    post:
      operationId: payment_start_create
      description: |-
        This endpoint provides information to start the payment flow for a submission.

        Due to support for legacy platforms this view doesn't redirect but provides information for the frontend to be used client side.

        Various validations are performed:
        * the form and submission must require payment
        * the `plugin_id` is configured on the form
        * payment is required and configured on the form
        * the `next` parameter must be present
        * the `next` parameter must match the CORS policy

        The HTTP 200 response contains the information to start the flow with the payment provider. Depending on the 'type', send a `GET` or `POST` request with the `data` as 'Form Data' to the given 'url'.
      summary: Start payment flow
      parameters:
      - in: query
        name: next
        schema:
          type: string
          format: uri
        description: URL of the form to redirect back to. This URL is validated against
          the CORS configuration.
        required: true
      - in: path
        name: plugin_id
        schema:
          type: string
        description: Identifier of the payment plugin. Note that this is validated
          against the configured available plugins for this particular form.
        required: true
      - in: path
        name: uuid
        schema:
          type: string
        description: UUID identifying the submission.
        required: true
      tags:
      - payment
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfo'
          description: ''
        '400':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Bad request. Invalid parameters were passed.
        '404':
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Not found. The slug did not point to a live submission or the
            `plugin_id` does not exist.
  /payment/{uuid}/return:
    get:
      operationId: payment_return_retrieve
      description: |-
        Payment plugins call this endpoint in the return step of the payment flow. Depending on the plugin, either `GET` or `POST` is allowed as HTTP method.

        Typically payment plugins will redirect again to the URL where the SDK is embedded.

        Various validations are performed:
        * the form and submission must require payment
        * the `plugin_id` is configured on the form
        * payment is required and configured on the form
        * the redirect target must match the CORS policy
      summary: Return from external payment flow
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
        description: UUID identifying the payment.
        required: true
      tags:
      - payment
      security:
      - {}
      responses:
        '302':
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL where the SDK initiated the payment flow.
              required: true
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          description: Tempomrary redirect
        '400':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Bad request. Invalid parameters were passed.
        '404':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Not found. The slug did not point to a live submission payment
            or the `plugin_id` does not exist.
    post:
      operationId: payment_return_create
      description: |-
        Payment plugins call this endpoint in the return step of the payment flow. Depending on the plugin, either `GET` or `POST` is allowed as HTTP method.

        Typically payment plugins will redirect again to the URL where the SDK is embedded.

        Various validations are performed:
        * the form and submission must require payment
        * the `plugin_id` is configured on the form
        * payment is required and configured on the form
        * the redirect target must match the CORS policy
      summary: Return from external payment flow
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
        description: UUID identifying the payment.
        required: true
      tags:
      - payment
      security:
      - {}
      responses:
        '302':
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL where the SDK initiated the payment flow.
              required: true
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          description: Tempomrary redirect
        '400':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Bad request. Invalid parameters were passed.
        '404':
          headers:
            Allow:
              schema:
                type: string
              description: Allowed HTTP method(s) for this plugin.
              required: true
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Not found. The slug did not point to a live submission payment
            or the `plugin_id` does not exist.
components:
  schemas:
    AppointmentProduct:
      type: object
      properties:
        code:
          type: string
          description: Product code
        identifier:
          type: string
          description: ID of the product
        name:
          type: string
          description: Product name
      required:
      - code
      - identifier
      - name
    AuthPlugin:
      type: object
      properties:
        id:
          type: string
          description: The unique plugin identifier
        label:
          type: string
          description: The human-readable name for a plugin.
        providesAuth:
          type: array
          items:
            type: string
            title: Authentication attribute
          title: Provides authentication attributes
          description: The authentication attribute provided by this plugin.
      required:
      - id
      - label
      - providesAuth
    AuthenticationBackendsEnum:
      enum:
      - demo
      - demo-kvk
      - demo-outage
      - bsn-outage
      - kvk-outage
      - digid-mock
      - digid
      - eherkenning
      - eidas
      type: string
    BlankEnum:
      enum:
      - ''
    ButtonText:
      type: object
      properties:
        resolved:
          type: string
          readOnly: true
        value:
          type: string
      required:
      - resolved
      - value
    CancelAppointmentInput:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email given when making the appointment
      required:
      - email
    CompletionValidation:
      type: object
      properties:
        incompleteSteps:
          type: array
          items:
            $ref: '#/components/schemas/IncompleteStep'
        submissionAllowed:
          allOf:
          - $ref: '#/components/schemas/SubmissionAllowedEnum'
          readOnly: true
      required:
      - incompleteSteps
      - submissionAllowed
    ComponentProperty:
      type: object
      properties:
        value:
          type: string
          title: property key
          description: The Form.io component property to alter, identified by `component.key`
        type:
          allOf:
          - $ref: '#/components/schemas/ComponentPropertyTypeEnum'
          description: The type of the value field
      required:
      - type
      - value
    ComponentPropertyTypeEnum:
      enum:
      - bool
      - json
      type: string
    ConfirmationEmailOptionEnum:
      enum:
      - form_specific_email
      - global_email
      - no_email
      type: string
    ConfirmationEmailTemplate:
      type: object
      properties:
        subject:
          type: string
          description: Subject of the email message
          maxLength: 1000
        content:
          type: string
          description: The content of the email message can contain variables that
            will be templated from the submitted form data.
    ContextAwareFormStep:
      type: object
      properties:
        index:
          type: integer
          readOnly: true
        configuration:
          type: object
          additionalProperties: {}
          readOnly: true
      required:
      - configuration
      - index
    Date:
      type: object
      properties:
        date:
          type: string
          format: date
      required:
      - date
    Exception:
      type: object
      description: |-
        Error format for HTTP 4xx and 5xx errors.

        See https://docs.geostandaarden.nl/api/API-Strategie-ext/#error-handling-0 for the NL API strategy guidelines.
      properties:
        type:
          type: string
          description: URI reference to the error type, intended for developers
        code:
          type: string
          description: System code indicating the type of error
        title:
          type: string
          description: Generic title for the type of error
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: Extra information about the error, if available
        instance:
          type: string
          description: URI with reference to this specific occurrence of the error.
            This can be used in conjunction with server logs, for example.
      required:
      - code
      - detail
      - instance
      - status
      - title
    Form:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 150
        internalName:
          type: string
          description: internal name for management purposes
          maxLength: 150
        loginRequired:
          type: boolean
          readOnly: true
        registrationBackend:
          type: string
          maxLength: 100
        registrationBackendOptions:
          type: object
          additionalProperties: {}
          nullable: true
        authenticationBackends:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationBackendsEnum'
          writeOnly: true
        loginOptions:
          type: array
          items:
            $ref: '#/components/schemas/LoginOption'
          readOnly: true
        autoLoginAuthenticationBackend:
          type: string
        paymentRequired:
          type: boolean
          readOnly: true
        paymentBackend:
          default: ''
          oneOf:
          - $ref: '#/components/schemas/PaymentBackendEnum'
          - $ref: '#/components/schemas/BlankEnum'
        paymentBackendOptions:
          type: object
          additionalProperties: {}
          nullable: true
        paymentOptions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentOption'
          readOnly: true
        literals:
          $ref: '#/components/schemas/FormLiterals'
        product:
          type: string
          format: uri
          nullable: true
          description: URL to the product in the Open Forms API
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        url:
          type: string
          format: uri
          readOnly: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/MinimalFormStep'
          readOnly: true
        showProgressIndicator:
          type: boolean
          description: Whether the step progression should be displayed in the UI
            or not.
        maintenanceMode:
          type: boolean
          description: Users will not be able to start the form if it is in maintenance
            mode.
        active:
          type: boolean
        isDeleted:
          type: boolean
        submissionConfirmationTemplate:
          type: string
          description: The content of the submission confirmation page. It can contain
            variables that will be templated from the submitted form data. If not
            specified, the global template will be used.
        explanationTemplate:
          type: string
          description: Content that will be shown on the start page of the form, below
            the title and above the log in text.
        submissionAllowed:
          allOf:
          - $ref: '#/components/schemas/SubmissionAllowedEnum'
          description: Whether the user is allowed to submit this form or not, and
            whether the overview page should be shown if they are not.
        submissionsRemovalOptions:
          $ref: '#/components/schemas/SubmissionsRemovalOptions'
        confirmationEmailTemplate:
          allOf:
          - $ref: '#/components/schemas/ConfirmationEmailTemplate'
          nullable: true
        confirmationEmailOption:
          $ref: '#/components/schemas/ConfirmationEmailOptionEnum'
      required:
      - loginOptions
      - loginRequired
      - name
      - paymentOptions
      - paymentRequired
      - slug
      - steps
      - url
      - uuid
    FormAdminMessage:
      type: object
      description: Collect metadata about which (success) message to send.
      properties:
        submitAction:
          allOf:
          - $ref: '#/components/schemas/SubmitActionEnum'
          description: Which submit action was clicked. This determines the success
            message todisplay.
        isCreate:
          type: boolean
          description: Whether the submit action was a create operation or update.
        redirectUrl:
          type: string
          format: uri
          readOnly: true
          description: Where the UI should redirect the user to. The exact admin URL
            varies with the submit action.
      required:
      - isCreate
      - redirectUrl
      - submitAction
    FormData:
      type: object
      properties:
        data:
          type: object
          additionalProperties: {}
          title: form data
          description: The Form.io submission data object. This will be merged with
            the full form submission data, including data from other steps, to evaluate
            the configured form logic.
    FormDefinition:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        uuid:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 50
        internalName:
          type: string
          description: internal name for management purposes
          maxLength: 50
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        configuration:
          type: object
          additionalProperties: {}
          title: Form.io configuration
          description: The form definition as Form.io JSON schema
        loginRequired:
          type: boolean
          description: DigID Login required for form step
        isReusable:
          type: boolean
          description: Allow this definition to be re-used in multiple forms
      required:
      - configuration
      - name
      - slug
      - url
    FormDefinitionDetail:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        uuid:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 50
        internalName:
          type: string
          description: internal name for management purposes
          maxLength: 50
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        configuration:
          type: object
          additionalProperties: {}
          title: Form.io configuration
          description: The form definition as Form.io JSON schema
        loginRequired:
          type: boolean
          description: DigID Login required for form step
        isReusable:
          type: boolean
          description: Allow this definition to be re-used in multiple forms
        usedIn:
          type: array
          items:
            $ref: '#/components/schemas/UsedInForm'
          title: Used in forms
          description: The collection of forms making use of this definition. This
            includes both active and inactive forms.
      required:
      - configuration
      - name
      - slug
      - url
      - usedIn
    FormImport:
      type: object
      properties:
        file:
          type: string
          format: uri
          description: The file that contains the form, form definitions and form
            steps.
      required:
      - file
    FormLiterals:
      type: object
      properties:
        previousText:
          $ref: '#/components/schemas/ButtonText'
        beginText:
          $ref: '#/components/schemas/ButtonText'
        changeText:
          $ref: '#/components/schemas/ButtonText'
        confirmText:
          $ref: '#/components/schemas/ButtonText'
    FormLogic:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        form:
          type: string
          format: uri
          description: Form to which the JSON logic applies.
        jsonLogicTrigger:
          type: object
          additionalProperties: {}
          title: JSON logic
          description: The trigger expression to determine if the actions should execute
            or not. Note that this must be a valid JsonLogic expression, and the first
            operand must be a reference to a component in the form.
        actions:
          type: array
          items:
            $ref: '#/components/schemas/LogicComponentAction'
          description: Actions triggered when the trigger expression evaluates to
            'truthy'.
        isAdvanced:
          type: boolean
          description: Is this an advanced rule (the admin user manually wrote the
            trigger as JSON)?
      required:
      - actions
      - form
      - jsonLogicTrigger
      - url
      - uuid
    FormPriceLogic:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        form:
          type: string
          format: uri
          description: Form to which the pricing JSON logic applies.
        jsonLogicTrigger:
          type: object
          additionalProperties: {}
          title: JSON logic
          description: The trigger expression to determine if the actions should execute
            or not. Note that this must be a valid JsonLogic expression, and the first
            operand must be a reference to a component in the form.
        price:
          type: string
          format: decimal
          pattern: ^\d{0,8}(?:\.\d{0,2})?$
      required:
      - form
      - jsonLogicTrigger
      - price
      - url
      - uuid
    FormStep:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        index:
          type: integer
        slug:
          type: string
          readOnly: true
        configuration:
          type: object
          additionalProperties: {}
          readOnly: true
        formDefinition:
          type: string
          format: uri
        name:
          type: string
          readOnly: true
        internalName:
          type: string
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        loginRequired:
          type: boolean
          readOnly: true
        isReusable:
          type: boolean
          readOnly: true
        literals:
          $ref: '#/components/schemas/FormStepLiterals'
      required:
      - configuration
      - formDefinition
      - index
      - internalName
      - isReusable
      - loginRequired
      - name
      - slug
      - url
      - uuid
    FormStepLiterals:
      type: object
      properties:
        previousText:
          $ref: '#/components/schemas/ButtonText'
        saveText:
          $ref: '#/components/schemas/ButtonText'
        nextText:
          $ref: '#/components/schemas/ButtonText'
    FormVersion:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
          readOnly: true
          description: Date and time of creation of the form version.
      required:
      - created
    GenericObject:
      type: object
      description: Generic object
      additionalProperties: true
    GetStreetNameAndCityViewResult:
      type: object
      properties:
        streetName:
          type: string
          description: Found street name
        city:
          type: string
          description: Found city
      required:
      - city
      - streetName
    IncompleteStep:
      type: object
      properties:
        formStep:
          type: string
          format: uri
          readOnly: true
      required:
      - formStep
    IncompleteSubmissionsRemovalMethodEnum:
      enum:
      - delete_permanently
      - make_anonymous
      type: string
    Location:
      type: object
      properties:
        identifier:
          type: string
          description: ID of the location
        name:
          type: string
          description: Location name
      required:
      - identifier
      - name
    LogicActionPolymorphic:
      oneOf:
      - $ref: '#/components/schemas/LogicActionPolymorphicGenericObject'
      - $ref: '#/components/schemas/LogicActionPolymorphicLogicPropertyAction'
      - $ref: '#/components/schemas/LogicActionPolymorphicLogicValueAction'
      discriminator:
        propertyName: type
        mapping:
          disable-next: '#/components/schemas/LogicActionPolymorphicGenericObject'
          property: '#/components/schemas/LogicActionPolymorphicLogicPropertyAction'
          value: '#/components/schemas/LogicActionPolymorphicLogicValueAction'
          step-not-applicable: '#/components/schemas/LogicActionPolymorphicGenericObject'
    LogicActionPolymorphicGenericObject:
      allOf:
      - $ref: '#/components/schemas/LogicActionPolymorphicShared'
      - $ref: '#/components/schemas/GenericObject'
    LogicActionPolymorphicLogicPropertyAction:
      allOf:
      - $ref: '#/components/schemas/LogicActionPolymorphicShared'
      - $ref: '#/components/schemas/LogicPropertyAction'
    LogicActionPolymorphicLogicValueAction:
      allOf:
      - $ref: '#/components/schemas/LogicActionPolymorphicShared'
      - $ref: '#/components/schemas/LogicValueAction'
    LogicActionPolymorphicShared:
      type: object
      description: |-
        Polymorphic serializer base class.

        Note that the discriminator field must exist at the same depth as the mapped serializer
        fields for the OpenAPI introspection. See
        https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/ for
        more information. As such, it's not possible to define something like:

        {
            "object_type": "foo",
            "polymorphic_context": {
                <foo-specific fields>
            }
        }

        without explicitly wrapping this in a parent serializer, i.e. - ``polymorphic_context``
        can not be a PolymorphicSerializer itself, as it requires access to the ``object_type``
        in the parent scope.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/LogicActionPolymorphicSharedTypeEnum'
          description: Action type for this particular action
      required:
      - type
    LogicActionPolymorphicSharedTypeEnum:
      enum:
      - step-not-applicable
      - disable-next
      - property
      - value
      type: string
    LogicComponentAction:
      type: object
      properties:
        component:
          type: string
          title: Form.io component
          description: 'Sleutel van de Form.io-component waarop de actie van toepassing
            is. Dit veld is optioneel als het actietype `disable-next` is, anders
            vereist. '
        formStep:
          type: string
          format: uri
          nullable: true
          description: De formulierstap die wordt beïnvloed door de actie. Dit veld
            is verplicht als het actietype `step-not-applicable` is, anders optioneel.
        action:
          $ref: '#/components/schemas/LogicActionPolymorphic'
      required:
      - action
    LogicPropertyAction:
      type: object
      properties:
        property:
          $ref: '#/components/schemas/ComponentProperty'
        state:
          type: object
          additionalProperties: {}
          title: value of the property
          description: 'Valid JSON determining the new value of the specified property.
            For example: `true` or `false`.'
      required:
      - property
      - state
    LogicValueAction:
      type: object
      properties:
        value:
          type: object
          additionalProperties: {}
          description: A valid JsonLogic expression describing the value. This may
            refer to (other) Form.io components.
      required:
      - value
    LoginLogo:
      type: object
      properties:
        title:
          type: string
          readOnly: true
          description: Display title (for accessibility)
        imageSrc:
          type: string
          format: uri
          readOnly: true
          title: Image URL
          description: URL to the logo image
        href:
          type: string
          format: uri
          readOnly: true
          title: Click URL
          description: Information link to the authentication provider
      required:
      - href
      - imageSrc
      - title
    LoginOption:
      type: object
      properties:
        identifier:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
          title: Button label
          description: Button label
        url:
          type: string
          format: uri
          readOnly: true
          title: Login URL
          description: URL to start login flow, expects 'next' GET-parameter with
            return url
        logo:
          allOf:
          - $ref: '#/components/schemas/LoginLogo'
          readOnly: true
          title: Optional logo
          description: Optional logo
      required:
      - identifier
      - label
      - logo
      - url
    MinimalFormStep:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        slug:
          type: string
          pattern: ^[-a-zA-Z0-9_]+$
        formDefinition:
          type: string
          readOnly: true
        index:
          type: integer
        literals:
          $ref: '#/components/schemas/FormStepLiterals'
        url:
          type: string
          format: uri
      required:
      - formDefinition
      - index
      - slug
      - url
      - uuid
    NestedSubmissionPaymentDetail:
      type: object
      properties:
        isRequired:
          type: boolean
          readOnly: true
          title: payment required
          description: Whether the registration requires payment.
        amount:
          type: string
          format: decimal
          pattern: ^\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
          nullable: true
          title: payment amount
          description: Amount (to be) paid
        hasPaid:
          type: boolean
          readOnly: true
          title: user has paid
          description: Whether the user has completed the required payment.
      required:
      - amount
      - hasPaid
      - isRequired
    NestedSubmissionStep:
      type: object
      description: |-
        A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead
        of primary key relationships.  Specifically:

        * A 'url' field is included instead of the 'id' field.
        * Relationships to other instances are hyperlinks, instead of primary keys.

        NOTE: this only works with DRF 3.1.0 and above.
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        url:
          type: string
          format: uri
          readOnly: true
        formStep:
          type: string
          format: uri
          readOnly: true
        isApplicable:
          type: boolean
          readOnly: true
        completed:
          type: boolean
          readOnly: true
        optional:
          type: boolean
          readOnly: true
        canSubmit:
          type: boolean
          readOnly: true
      required:
      - canSubmit
      - completed
      - formStep
      - id
      - isApplicable
      - name
      - optional
      - url
    PaginatedFormDefinitionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/FormDefinition'
    PaginatedSubmissionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Submission'
    PatchedForm:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 150
        internalName:
          type: string
          description: internal name for management purposes
          maxLength: 150
        loginRequired:
          type: boolean
          readOnly: true
        registrationBackend:
          type: string
          maxLength: 100
        registrationBackendOptions:
          type: object
          additionalProperties: {}
          nullable: true
        authenticationBackends:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationBackendsEnum'
          writeOnly: true
        loginOptions:
          type: array
          items:
            $ref: '#/components/schemas/LoginOption'
          readOnly: true
        autoLoginAuthenticationBackend:
          type: string
        paymentRequired:
          type: boolean
          readOnly: true
        paymentBackend:
          default: ''
          oneOf:
          - $ref: '#/components/schemas/PaymentBackendEnum'
          - $ref: '#/components/schemas/BlankEnum'
        paymentBackendOptions:
          type: object
          additionalProperties: {}
          nullable: true
        paymentOptions:
          type: array
          items:
            $ref: '#/components/schemas/PaymentOption'
          readOnly: true
        literals:
          $ref: '#/components/schemas/FormLiterals'
        product:
          type: string
          format: uri
          nullable: true
          description: URL to the product in the Open Forms API
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        url:
          type: string
          format: uri
          readOnly: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/MinimalFormStep'
          readOnly: true
        showProgressIndicator:
          type: boolean
          description: Whether the step progression should be displayed in the UI
            or not.
        maintenanceMode:
          type: boolean
          description: Users will not be able to start the form if it is in maintenance
            mode.
        active:
          type: boolean
        isDeleted:
          type: boolean
        submissionConfirmationTemplate:
          type: string
          description: The content of the submission confirmation page. It can contain
            variables that will be templated from the submitted form data. If not
            specified, the global template will be used.
        explanationTemplate:
          type: string
          description: Content that will be shown on the start page of the form, below
            the title and above the log in text.
        submissionAllowed:
          allOf:
          - $ref: '#/components/schemas/SubmissionAllowedEnum'
          description: Whether the user is allowed to submit this form or not, and
            whether the overview page should be shown if they are not.
        submissionsRemovalOptions:
          $ref: '#/components/schemas/SubmissionsRemovalOptions'
        confirmationEmailTemplate:
          allOf:
          - $ref: '#/components/schemas/ConfirmationEmailTemplate'
          nullable: true
        confirmationEmailOption:
          $ref: '#/components/schemas/ConfirmationEmailOptionEnum'
    PatchedFormDefinition:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        uuid:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 50
        internalName:
          type: string
          description: internal name for management purposes
          maxLength: 50
        slug:
          type: string
          maxLength: 100
          pattern: ^[-a-zA-Z0-9_]+$
        configuration:
          type: object
          additionalProperties: {}
          title: Form.io configuration
          description: The form definition as Form.io JSON schema
        loginRequired:
          type: boolean
          description: DigID Login required for form step
        isReusable:
          type: boolean
          description: Allow this definition to be re-used in multiple forms
    PatchedFormLogic:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        form:
          type: string
          format: uri
          description: Form to which the JSON logic applies.
        jsonLogicTrigger:
          type: object
          additionalProperties: {}
          title: JSON logic
          description: The trigger expression to determine if the actions should execute
            or not. Note that this must be a valid JsonLogic expression, and the first
            operand must be a reference to a component in the form.
        actions:
          type: array
          items:
            $ref: '#/components/schemas/LogicComponentAction'
          description: Actions triggered when the trigger expression evaluates to
            'truthy'.
        isAdvanced:
          type: boolean
          description: Is this an advanced rule (the admin user manually wrote the
            trigger as JSON)?
    PatchedFormPriceLogic:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        form:
          type: string
          format: uri
          description: Form to which the pricing JSON logic applies.
        jsonLogicTrigger:
          type: object
          additionalProperties: {}
          title: JSON logic
          description: The trigger expression to determine if the actions should execute
            or not. Note that this must be a valid JsonLogic expression, and the first
            operand must be a reference to a component in the form.
        price:
          type: string
          format: decimal
          pattern: ^\d{0,8}(?:\.\d{0,2})?$
    PatchedFormStep:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        index:
          type: integer
        slug:
          type: string
          readOnly: true
        configuration:
          type: object
          additionalProperties: {}
          readOnly: true
        formDefinition:
          type: string
          format: uri
        name:
          type: string
          readOnly: true
        internalName:
          type: string
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        loginRequired:
          type: boolean
          readOnly: true
        isReusable:
          type: boolean
          readOnly: true
        literals:
          $ref: '#/components/schemas/FormStepLiterals'
    PaymentBackendEnum:
      enum:
      - ogone-legacy
      type: string
    PaymentInfo:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/PaymentInfoTypeEnum'
          readOnly: true
          title: Request type
        url:
          type: string
          format: uri
          readOnly: true
        data:
          type: object
          additionalProperties:
            type: string
            readOnly: true
            title: Value
          readOnly: true
      required:
      - data
      - type
      - url
    PaymentInfoTypeEnum:
      enum:
      - get
      - post
      type: string
    PaymentOption:
      type: object
      properties:
        identifier:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
          title: Button label
          description: Button label
      required:
      - identifier
      - label
    PaymentPlugin:
      type: object
      description: Serialize the available plugins for the form builder.
      properties:
        id:
          type: string
          description: The unique plugin identifier
        label:
          type: string
          description: The human-readable name for a plugin.
        schema:
          type: object
          additionalProperties: {}
          title: JSON schema
          description: The generated JSON schema for the plugin options.
      required:
      - id
      - label
      - schema
    PrefillAttribute:
      type: object
      properties:
        id:
          type: string
          description: The unique attribute identifier
        label:
          type: string
          description: The human-readable name for an attribute.
      required:
      - id
      - label
    PrefillPlugin:
      type: object
      properties:
        id:
          type: string
          description: The unique plugin identifier
        label:
          type: string
          description: The human-readable name for a plugin.
        requiresAuth:
          type: string
          nullable: true
          title: Required authentication attribute
          description: The authentication attribute required for this plugin to lookup
            remote data.
      required:
      - id
      - label
      - requiresAuth
    PrivacyPolicyInfo:
      type: object
      properties:
        requiresPrivacyConsent:
          type: boolean
          description: Of de gebruiker akkoord moet gaan met het privacybeleid voordat
            hij een formulier indient.
        privacyLabel:
          type: string
          description: Het opgemaakte label dat naast het selectievakje moet worden
            getoond wanneer de gebruiker wordt gevraagd akkoord te gaan met het privacybeleid.
      required:
      - requiresPrivacyConsent
    ProcessDefinition:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
          description: The process definition identifier, used to group different
            versions.
        name:
          type: string
          description: The human-readable name of the process definition.
        version:
          type: integer
          description: The version identifier relative to the 'key'.
      required:
      - id
      - key
      - name
      - version
    Product:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
          description: Globally unique identifier
        name:
          type: string
          maxLength: 50
        price:
          type: string
          format: decimal
          pattern: ^\d{0,8}(?:\.\d{0,2})?$
        information:
          type: string
          description: Information text to be displayed in the confirmation page and
            confirmation email.
      required:
      - name
      - price
      - url
      - uuid
    RegistrationAttribute:
      type: object
      properties:
        id:
          type: string
          description: The unique attribute identifier
        label:
          type: string
          description: The human-readable name for an attribute.
      required:
      - id
      - label
    RegistrationPlugin:
      type: object
      properties:
        id:
          type: string
          description: The unique plugin identifier
        label:
          type: string
          description: The human-readable name for a plugin.
        schema:
          type: object
          additionalProperties: {}
          title: JSON schema
          description: The generated JSON schema for the plugin options.
      required:
      - id
      - label
      - schema
    ResultEnum:
      enum:
      - failed
      - success
      type: string
    StatusEnum:
      enum:
      - in_progress
      - done
      type: string
    Submission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          title: UUID
        url:
          type: string
          format: uri
          readOnly: true
        form:
          type: string
          format: uri
        steps:
          type: array
          items:
            $ref: '#/components/schemas/NestedSubmissionStep'
          readOnly: true
          title: Submission steps
          description: Details of every form step of this submission's form, tracking
            the progress and other meta-data of each particular step.
        nextStep:
          type: string
          format: uri
          readOnly: true
          nullable: true
        submissionAllowed:
          allOf:
          - $ref: '#/components/schemas/SubmissionAllowedEnum'
          readOnly: true
          description: Whether the user is allowed to submit this form and whether
            the user should see the overview page.
        payment:
          allOf:
          - $ref: '#/components/schemas/NestedSubmissionPaymentDetail'
          readOnly: true
          title: payment information
        formUrl:
          type: string
          format: uri
          description: URL where the user initialized the submission.
          maxLength: 255
      required:
      - form
      - formUrl
      - id
      - nextStep
      - payment
      - steps
      - submissionAllowed
      - url
    SubmissionAllowedEnum:
      enum:
      - 'yes'
      - no_with_overview
      - no_without_overview
      type: string
    SubmissionCoSignStatus:
      type: object
      properties:
        coSigned:
          type: boolean
          readOnly: true
          title: is co-signed?
          description: Indicator whether the submission has been co-signed or not.
        representation:
          type: string
          readOnly: true
          title: Co-signer display
          description: Co-signer representation string for the UI.
      required:
      - coSigned
      - representation
    SubmissionCompletion:
      type: object
      properties:
        statusUrl:
          type: string
          format: uri
          title: status check endpoint
          description: The API endpoint where the background processing status can
            be checked. After calling the completion endpoint, this status URL should
            be polled to report the processing status back to the end-user. Note that
            the endpoint contains a token which invalidates on state changes and after
            one day.
      required:
      - statusUrl
    SubmissionProcessingStatus:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          default: in_progress
          title: background processing status
          description: The async task state, managed by the async task queue. Once
            the status is `done`, check the `result` field for the outcome.
        result:
          title: background processing result
          description: The result from the background processing. This field only
            has a value if the processing has completed (both successfully or with
            errors).
          oneOf:
          - $ref: '#/components/schemas/ResultEnum'
          - $ref: '#/components/schemas/BlankEnum'
        errorMessage:
          type: string
          title: Error information
          description: Error feedback in case the processing did not complete successfully.
        publicReference:
          type: string
          description: The public registration reference, sourced from the registration
            backend or otherwise uniquely generated in case the backend could not
            provide it.
        confirmationPageContent:
          type: string
          description: Body text of the confirmation page. May contain HTML!
        reportDownloadUrl:
          type: string
          format: uri
          description: Download URL for the generated PDF report. Note that this contain
            a timestamped token generated by the backend.
        paymentUrl:
          type: string
          format: uri
          description: URL to retrieve the payment information. Note that this (will)
            contain(s) a timestamped token generated by the backend.
    SubmissionStateLogic:
      type: object
      properties:
        submission:
          $ref: '#/components/schemas/Submission'
        step:
          $ref: '#/components/schemas/SubmissionStep'
      required:
      - step
      - submission
    SubmissionStep:
      type: object
      description: |-
        A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead
        of primary key relationships.  Specifically:

        * A 'url' field is included instead of the 'id' field.
        * Relationships to other instances are hyperlinks, instead of primary keys.

        NOTE: this only works with DRF 3.1.0 and above.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
          title: UUID
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        formStep:
          allOf:
          - $ref: '#/components/schemas/ContextAwareFormStep'
          readOnly: true
        data:
          type: object
          additionalProperties: {}
          nullable: true
        isApplicable:
          type: boolean
          readOnly: true
        completed:
          type: boolean
          readOnly: true
        optional:
          type: boolean
          readOnly: true
        canSubmit:
          type: boolean
          readOnly: true
      required:
      - canSubmit
      - completed
      - formStep
      - id
      - isApplicable
      - optional
      - slug
    SubmissionSuspension:
      type: object
      properties:
        email:
          type: string
          format: email
          writeOnly: true
          title: Contact email address
          description: The email address where the 'magic' resume link should be sent
            to
        suspendedOn:
          type: string
          format: date-time
          readOnly: true
      required:
      - email
      - suspendedOn
    SubmissionsRemovalOptions:
      type: object
      properties:
        successfulSubmissionsRemovalLimit:
          type: integer
          maximum: 2147483647
          minimum: 1
          nullable: true
          title: Successful submission removal limit
          description: Amount of days successful submissions of this form will remain
            before being removed. Leave blank to use value in General Configuration.
        successfulSubmissionsRemovalMethod:
          description: How successful submissions of this form will be removed after
            the limit. Leave blank to use value in General Configuration.
          oneOf:
          - $ref: '#/components/schemas/IncompleteSubmissionsRemovalMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        incompleteSubmissionsRemovalLimit:
          type: integer
          maximum: 2147483647
          minimum: 1
          nullable: true
          title: Incomplete submission removal limit
          description: Amount of days incomplete submissions of this form will remain
            before being removed. Leave blank to use value in General Configuration.
        incompleteSubmissionsRemovalMethod:
          description: How incomplete submissions of this form will be removed after
            the limit. Leave blank to use value in General Configuration.
          oneOf:
          - $ref: '#/components/schemas/IncompleteSubmissionsRemovalMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        erroredSubmissionsRemovalLimit:
          type: integer
          maximum: 2147483647
          minimum: 1
          nullable: true
          title: Errored submission removal limit
          description: Amount of days errored submissions of this form will remain
            before being removed. Leave blank to use value in General Configuration.
        erroredSubmissionsRemovalMethod:
          title: Errored submission removal limit
          description: How errored submissions of this form will be removed after
            the limit. Leave blank to use value in General Configuration.
          oneOf:
          - $ref: '#/components/schemas/IncompleteSubmissionsRemovalMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        allSubmissionsRemovalLimit:
          type: integer
          maximum: 2147483647
          minimum: 1
          nullable: true
          description: Amount of days when all submissions of this form will be permanently
            deleted. Leave blank to use value in General Configuration.
    SubmitActionEnum:
      enum:
      - _save
      - _addanother
      - _continue
      type: string
    TemporaryFileUpload:
      type: object
      description: |-
        https://help.form.io/integrations/filestorage/#url

        {
            url: 'http://link.to/file',
            name: 'The_Name_Of_The_File.doc',
            size: 1000
        }
      properties:
        file:
          type: string
          writeOnly: true
        url:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
          title: File name
        size:
          type: integer
          readOnly: true
          title: File size
      required:
      - file
      - name
      - size
      - url
    Time:
      type: object
      properties:
        time:
          type: string
          format: date-time
      required:
      - time
    UsedInForm:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        uuid:
          type: string
          format: uuid
        name:
          type: string
          readOnly: true
        active:
          type: boolean
        adminUrl:
          type: string
          format: uri
          readOnly: true
          description: Link to the change/view page in the admin interface
      required:
      - adminUrl
      - name
      - url
    ValidationInput:
      type: object
      properties:
        value:
          type: string
          description: Value to be validated
      required:
      - value
    ValidationPlugin:
      type: object
      properties:
        id:
          type: string
          description: The unique plugin identifier
        label:
          type: string
          description: The human-readable name for a plugin.
      required:
      - id
      - label
    ValidationResult:
      type: object
      properties:
        isValid:
          type: boolean
          description: Boolean indicating value passed validation.
        messages:
          type: array
          items: {}
          readOnly: true
          description: List of validation error messages for display.
      required:
      - isValid
      - messages
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: openforms_sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
externalDocs:
  description: Functional and technical documentation
  url: https://open-forms.readthedocs.io/
