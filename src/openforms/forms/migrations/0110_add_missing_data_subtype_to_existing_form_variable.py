# Generated by Django 4.2.23 on 2025-08-06 12:45
import itertools

from django.db import migrations
from django.db.migrations.state import StateApps

from tqdm import tqdm

from openforms.formio.datastructures import FormioConfigurationWrapper
from openforms.formio.utils import get_component_data_subtype, get_component_datatype
from openforms.variables.constants import FormVariableDataTypes, FormVariableSources


def add_data_subtype_to_existing_form_variables(apps: StateApps, _):
    FormVariable = apps.get_model("forms", "FormVariable")
    FormDefinition = apps.get_model("forms", "FormDefinition")

    # only consider variables and form definitions that have array datatype and are
    # related to a component
    qs = FormVariable.objects.filter(
        form_definition__isnull=False,
        data_type=FormVariableDataTypes.array,
        data_subtype="",
        source=FormVariableSources.component,
    ).order_by("form_definition_id")
    form_definitions = {
        fd.pk: fd
        for fd in FormDefinition.objects.filter(
            id__in=qs.values("form_definition_id").distinct()
        )
    }

    for form_definition_id, form_variables in tqdm(
        itertools.groupby(qs.iterator(), key=lambda fv: fv.form_definition_id),
        total=len(form_definitions),
        dynamic_ncols=True,
        disable=None,
        unit="form def",
    ):
        form_definition = form_definitions[form_definition_id]
        wrapper = FormioConfigurationWrapper(form_definition.configuration)

        variables_to_update = []
        for variable in form_variables:
            if variable.key in wrapper:
                component = wrapper[variable.key]
                # We update the data type as well to make sure there is no mismatch
                # between a (possibly) outdated array data type
                variable.data_type = get_component_datatype(component)
                variable.data_subtype = get_component_data_subtype(component)
            else:
                # If the variable key is not present in the configuration, we cannot do
                # much, so just assume a string subtype to ensure the constraint (from
                # migration 0111) will not be violated.
                variable.data_subtype = FormVariableDataTypes.string

            variables_to_update.append(variable)

        FormVariable.objects.bulk_update(
            variables_to_update, fields=["data_type", "data_subtype"]
        )


class Migration(migrations.Migration):
    dependencies = [
        ("forms", "0109_formvariable_data_type_and_data_subtype"),
    ]

    operations = [
        migrations.RunPython(
            add_data_subtype_to_existing_form_variables,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
