# Generated by Django 4.2.21 on 2025-06-03 11:44

from django.db import migrations

from ..oidc_plugins.constants import (
    OIDC_ORG_IDENTIFIER,
)


def _migrate_config_forward(config_old, identifier, options, apps):
    OIDCClient = apps.get_model("mozilla_django_oidc_db", "OIDCClient")
    OIDCProvider = apps.get_model("mozilla_django_oidc_db", "OIDCProvider")

    # Maybe reuse an existing provider
    oidc_provider, _ = OIDCProvider.objects.get_or_create(
        oidc_op_discovery_endpoint=(config_old.oidc_op_discovery_endpoint),
        defaults={
            "identifier": f"{identifier}-provider",
            "oidc_op_discovery_endpoint": (config_old.oidc_op_discovery_endpoint),
            "oidc_op_jwks_endpoint": config_old.oidc_op_jwks_endpoint,
            "oidc_op_authorization_endpoint": (
                config_old.oidc_op_authorization_endpoint
            ),
            "oidc_op_token_endpoint": config_old.oidc_op_token_endpoint,
            "oidc_op_user_endpoint": config_old.oidc_op_user_endpoint,
            "oidc_op_logout_endpoint": config_old.oidc_op_logout_endpoint,
            "oidc_token_use_basic_auth": config_old.oidc_token_use_basic_auth,
            "oidc_use_nonce": config_old.oidc_use_nonce,
            "oidc_nonce_size": config_old.oidc_nonce_size,
            "oidc_state_size": config_old.oidc_state_size,
        },
    )

    OIDCClient.objects.update_or_create(
        identifier=identifier,
        defaults={
            "enabled": config_old.enabled,
            "oidc_provider": oidc_provider,
            "oidc_rp_client_id": config_old.oidc_rp_client_id,
            "oidc_rp_client_secret": config_old.oidc_rp_client_secret,
            "oidc_rp_sign_algo": config_old.oidc_rp_sign_algo,
            "oidc_rp_scopes_list": config_old.oidc_rp_scopes_list,
            "oidc_rp_idp_sign_key": config_old.oidc_rp_idp_sign_key,
            "oidc_keycloak_idp_hint": config_old.oidc_keycloak_idp_hint,
            "userinfo_claims_source": config_old.userinfo_claims_source,
            "options": options,
        },
    )


def move_data_forward(apps, schema_editor):
    OrgOpenIDConnectConfig = apps.get_model(
        "authentication_org_oidc", "OrgOpenIDConnectConfig"
    )

    org_config_old = OrgOpenIDConnectConfig.objects.first()
    if org_config_old:
        options = {
            "user_settings": {
                "claim_mappings": {
                    "username": org_config_old.username_claim,
                    **org_config_old.claim_mapping,
                },
                "username_case_sensitive": True,
            },
            "groups_settings": {
                "claim_mapping": org_config_old.groups_claim,
                "sync": org_config_old.sync_groups,
                "sync_pattern": org_config_old.sync_groups_glob_pattern,
                "default_groups": [
                    group.name for group in org_config_old.default_groups.all()
                ],
                "make_users_staff": org_config_old.make_users_staff,
                "superuser_group_names": org_config_old.superuser_group_names,
            },
        }
        _migrate_config_forward(
            org_config_old,
            OIDC_ORG_IDENTIFIER,
            options,
            apps,
        )


def move_data_backwards(apps, schema_editor):
    OIDCClient = apps.get_model("mozilla_django_oidc_db", "OIDCClient")
    OrgOpenIDConnectConfig = apps.get_model(
        "authentication_org_oidc", "OrgOpenIDConnectConfig"
    )
    Group = apps.get_model("auth", "Group")

    new_config = OIDCClient.objects.filter(identifier=OIDC_ORG_IDENTIFIER).first()
    if not new_config or not new_config.oidc_provider:
        return

    other_user_mappings = new_config.options["user_settings"]["claim_mappings"]
    username_claim_mapping = other_user_mappings["username"]
    del other_user_mappings["username"]

    group_settings = new_config.options.get("groups_settings", {})

    old_config = OrgOpenIDConnectConfig.objects.create(
        enabled=new_config.enabled,
        # Provider settings
        oidc_op_discovery_endpoint=(
            new_config.oidc_provider.oidc_op_discovery_endpoint
        ),
        oidc_op_jwks_endpoint=new_config.oidc_provider.oidc_op_jwks_endpoint,
        oidc_op_authorization_endpoint=(
            new_config.oidc_provider.oidc_op_authorization_endpoint
        ),
        oidc_op_token_endpoint=new_config.oidc_provider.oidc_op_token_endpoint,
        oidc_op_user_endpoint=new_config.oidc_provider.oidc_op_user_endpoint,
        oidc_op_logout_endpoint=(new_config.oidc_provider.oidc_op_logout_endpoint),
        oidc_token_use_basic_auth=new_config.oidc_provider.oidc_token_use_basic_auth,
        oidc_use_nonce=new_config.oidc_provider.oidc_use_nonce,
        oidc_nonce_size=new_config.oidc_provider.oidc_nonce_size,
        oidc_state_size=new_config.oidc_provider.oidc_state_size,
        # Client settings
        oidc_rp_client_id=new_config.oidc_rp_client_id,
        oidc_rp_client_secret=new_config.oidc_rp_client_secret,
        oidc_rp_sign_algo=new_config.oidc_rp_sign_algo,
        oidc_rp_scopes_list=new_config.oidc_rp_scopes_list,
        oidc_rp_idp_sign_key=new_config.oidc_rp_idp_sign_key,
        oidc_keycloak_idp_hint=new_config.oidc_keycloak_idp_hint,
        userinfo_claims_source=new_config.userinfo_claims_source,
        # Options
        username_claim=username_claim_mapping,
        claim_mapping=other_user_mappings,
        groups_claim=group_settings.get("claim_mapping", []),
        sync_groups=group_settings.get("sync", True),
        sync_groups_glob_pattern=group_settings.get("sync_pattern", "*"),
        make_users_staff=group_settings.get("make_users_staff", False),
        superuser_group_names=group_settings.get("superuser_group_names", []),
    )

    groups = [
        Group.objects.get_or_create(name=group_name)[0]
        for group_name in group_settings.get("default_groups", [])
    ]

    old_config.default_groups.set(groups)
    old_config.save()


class Migration(migrations.Migration):
    dependencies = [
        (
            "mozilla_django_oidc_db",
            "0006_oidcprovider_oidcclient",
        ),
        ("authentication_org_oidc", "0001_initial"),
        (
            "digid_eherkenning_oidc_generics",
            "0009_remove_digidconfig_oidc_exempt_urls_and_more",
        ),
    ]
    run_before = [
        (
            "digid_eherkenning_oidc_generics",
            "0010_delete_digidconfig_delete_digidmachtigenconfig_and_more",
        ),
        ("mozilla_django_oidc_db", "0008_delete_openidconnectconfig"),
    ]

    operations = [migrations.RunPython(move_data_forward, move_data_backwards)]
