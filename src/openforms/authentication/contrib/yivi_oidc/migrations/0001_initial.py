# Generated by Django 4.2.21 on 2025-07-02 19:11

from django.db import migrations, models

import django_jsonform.models.fields
import mozilla_django_oidc_db.fields


def get_default_scopes_yivi():
    """
    Return the default scopes to request for OpenID Connect logins for Yivi.
    """
    return ["openid"]


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AttributeGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="A human-readable name for the group of attributes, used in the form configuration.",
                        max_length=100,
                        unique=True,
                        verbose_name="group name",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="A longer human-readable description for the group of attributes, used in the form configuration.",
                        max_length=200,
                        verbose_name="group description",
                    ),
                ),
                (
                    "attributes",
                    django_jsonform.models.fields.ArrayField(  # type: ignore
                        base_field=models.CharField(
                            blank=True, max_length=100, verbose_name="attribute"
                        ),
                        blank=True,
                        default=list,
                        help_text="List of attributes that will be requested from the user. The user can choose whether to grant access to all these attributes, or none. If you want individually optional attributes, you should define them as separate attribute groups.",
                        size=None,
                        verbose_name="attributes",
                    ),
                ),
            ],
            options={
                "verbose_name": "yivi attribute group",
                "verbose_name_plural": "yivi attribute groups",
            },
        ),
        migrations.CreateModel(
            name="YiviOpenIDConnectConfig",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates whether OpenID Connect for authentication/authorization is enabled",
                        verbose_name="enable",
                    ),
                ),
                (
                    "oidc_rp_client_id",
                    models.CharField(
                        help_text="OpenID Connect client ID provided by the OIDC Provider",
                        max_length=1000,
                        verbose_name="OpenID Connect client ID",
                    ),
                ),
                (
                    "oidc_rp_client_secret",
                    models.CharField(
                        help_text="OpenID Connect secret provided by the OIDC Provider",
                        max_length=1000,
                        verbose_name="OpenID Connect secret",
                    ),
                ),
                (
                    "oidc_rp_sign_algo",
                    models.CharField(
                        default="HS256",
                        help_text="Algorithm the Identity Provider uses to sign ID tokens",
                        max_length=50,
                        verbose_name="OpenID sign algorithm",
                    ),
                ),
                (
                    "oidc_op_discovery_endpoint",
                    models.URLField(
                        blank=True,
                        help_text="URL of your OpenID Connect provider discovery endpoint ending with a slash (`.well-known/...` will be added automatically). If this is provided, the remaining endpoints can be omitted, as they will be derived from this endpoint.",
                        max_length=1000,
                        verbose_name="Discovery endpoint",
                    ),
                ),
                (
                    "oidc_op_jwks_endpoint",
                    models.URLField(
                        blank=True,
                        help_text="URL of your OpenID Connect provider JSON Web Key Set endpoint. Required if `RS256` is used as signing algorithm.",
                        max_length=1000,
                        verbose_name="JSON Web Key Set endpoint",
                    ),
                ),
                (
                    "oidc_op_authorization_endpoint",
                    models.URLField(
                        help_text="URL of your OpenID Connect provider authorization endpoint",
                        max_length=1000,
                        verbose_name="Authorization endpoint",
                    ),
                ),
                (
                    "oidc_op_token_endpoint",
                    models.URLField(
                        help_text="URL of your OpenID Connect provider token endpoint",
                        max_length=1000,
                        verbose_name="Token endpoint",
                    ),
                ),
                (
                    "oidc_token_use_basic_auth",
                    models.BooleanField(
                        default=False,
                        help_text="If enabled, the client ID and secret are sent in the HTTP Basic auth header when obtaining the access token. Otherwise, they are sent in the request body.",
                        verbose_name="Use Basic auth for token endpoint",
                    ),
                ),
                (
                    "oidc_op_user_endpoint",
                    models.URLField(
                        help_text="URL of your OpenID Connect provider userinfo endpoint",
                        max_length=1000,
                        verbose_name="User endpoint",
                    ),
                ),
                (
                    "oidc_rp_idp_sign_key",
                    models.CharField(
                        blank=True,
                        help_text="Key the Identity Provider uses to sign ID tokens in the case of an RSA sign algorithm. Should be the signing key in PEM or DER format.",
                        max_length=1000,
                        verbose_name="Sign key",
                    ),
                ),
                (
                    "oidc_op_logout_endpoint",
                    models.URLField(
                        blank=True,
                        help_text="URL of your OpenID Connect provider logout endpoint",
                        max_length=1000,
                        verbose_name="Logout endpoint",
                    ),
                ),
                (
                    "oidc_use_nonce",
                    models.BooleanField(
                        default=True,
                        help_text="Controls whether the OpenID Connect client uses nonce verification",
                        verbose_name="Use nonce",
                    ),
                ),
                (
                    "oidc_nonce_size",
                    models.PositiveIntegerField(
                        default=32,
                        help_text="Sets the length of the random string used for OpenID Connect nonce verification",
                        verbose_name="Nonce size",
                    ),
                ),
                (
                    "oidc_state_size",
                    models.PositiveIntegerField(
                        default=32,
                        help_text="Sets the length of the random string used for OpenID Connect state verification",
                        verbose_name="State size",
                    ),
                ),
                (
                    "oidc_keycloak_idp_hint",
                    models.CharField(
                        blank=True,
                        help_text="Specific for Keycloak: parameter that indicates which identity provider should be used (therefore skipping the Keycloak login screen).",
                        max_length=1000,
                        verbose_name="Keycloak Identity Provider hint",
                    ),
                ),
                (
                    "userinfo_claims_source",
                    models.CharField(
                        choices=[
                            ("userinfo_endpoint", "Userinfo endpoint"),
                            ("id_token", "ID token"),
                        ],
                        default="userinfo_endpoint",
                        help_text="Indicates the source from which the user information claims should be extracted.",
                        max_length=100,
                        verbose_name="user information claims extracted from",
                    ),
                ),
                (
                    "loa_claim",
                    mozilla_django_oidc_db.fields.ClaimField(
                        base_field=models.CharField(
                            max_length=50, verbose_name="claim path segment"
                        ),
                        blank=True,
                        default=None,
                        help_text="Name of the claim holding the level of assurance. If left empty, it is assumed there is no LOA claim and the configured fallback value will be used.",
                        null=True,
                        size=None,
                        verbose_name="LoA claim",
                    ),
                ),
                (
                    "default_loa",
                    models.CharField(
                        blank=True,
                        choices=[],
                        help_text="Fallback level of assurance, in case no claim value could be extracted.",
                        max_length=100,
                        verbose_name="default LOA",
                    ),
                ),
                (
                    "loa_value_mapping",
                    django_jsonform.models.fields.JSONField(
                        blank=True,
                        default=list,
                        help_text="Level of assurance claim value mappings. Useful if the values in the LOA claim are proprietary, so you can translate them into their standardized identifiers.",
                        verbose_name="loa mapping",
                    ),
                ),
                (
                    "oidc_rp_scopes_list",
                    django_jsonform.models.fields.ArrayField(  # type: ignore
                        base_field=models.CharField(
                            max_length=50, verbose_name="OpenID Connect scope"
                        ),
                        blank=True,
                        default=get_default_scopes_yivi,
                        help_text="OpenID Connect scopes that are requested during login.",
                        size=None,
                        verbose_name="OpenID Connect scopes",
                    ),
                ),
                (
                    "bsn_claim",
                    mozilla_django_oidc_db.fields.ClaimField(
                        base_field=models.CharField(
                            max_length=50, verbose_name="claim path segment"
                        ),
                        default=mozilla_django_oidc_db.fields.ClaimFieldDefault("bsn"),
                        help_text="Name of the claim holding the authenticated user's BSN.",
                        size=None,
                        verbose_name="bsn claim",
                    ),
                ),
                (
                    "bsn_loa_claim",
                    mozilla_django_oidc_db.fields.ClaimField(
                        base_field=models.CharField(
                            max_length=50, verbose_name="claim path segment"
                        ),
                        blank=True,
                        default=None,
                        help_text="Name of the claim holding the level of assurance. If left empty, it is assumed there is no LOA claim and the configured fallback value will be used.",
                        null=True,
                        size=None,
                        verbose_name="LoA claim",
                    ),
                ),
                (
                    "bsn_default_loa",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport",
                                "DigiD Basis",
                            ),
                            (
                                "urn:oasis:names:tc:SAML:2.0:ac:classes:MobileTwoFactorContract",
                                "DigiD Midden",
                            ),
                            (
                                "urn:oasis:names:tc:SAML:2.0:ac:classes:Smartcard",
                                "DigiD Substantieel",
                            ),
                            (
                                "urn:oasis:names:tc:SAML:2.0:ac:classes:SmartcardPKI",
                                "DigiD Hoog",
                            ),
                        ],
                        help_text="Fallback level of assurance, in case no claim value could be extracted.",
                        max_length=100,
                        verbose_name="default LOA",
                    ),
                ),
                (
                    "bsn_loa_value_mapping",
                    django_jsonform.models.fields.JSONField(
                        blank=True,
                        default=list,
                        help_text="Level of assurance claim value mappings. Useful if the values in the LOA claim are proprietary, so you can translate them into their standardized identifiers.",
                        verbose_name="loa mapping",
                    ),
                ),
                (
                    "kvk_claim",
                    mozilla_django_oidc_db.fields.ClaimField(
                        base_field=models.CharField(
                            max_length=50, verbose_name="claim path segment"
                        ),
                        default=mozilla_django_oidc_db.fields.ClaimFieldDefault("kvk"),
                        help_text="Name of the claim holding the KVK identifier of the authenticated company.",
                        size=None,
                        verbose_name="KVK claim",
                    ),
                ),
                (
                    "kvk_loa_claim",
                    mozilla_django_oidc_db.fields.ClaimField(
                        base_field=models.CharField(
                            max_length=50, verbose_name="claim path segment"
                        ),
                        blank=True,
                        default=None,
                        help_text="Name of the claim holding the level of assurance. If left empty, it is assumed there is no LOA claim and the configured fallback value will be used.",
                        null=True,
                        size=None,
                        verbose_name="LoA claim",
                    ),
                ),
                (
                    "kvk_default_loa",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "urn:etoegang:core:assurance-class:loa1",
                                "Non existent (1)",
                            ),
                            ("urn:etoegang:core:assurance-class:loa2", "Low (2)"),
                            ("urn:etoegang:core:assurance-class:loa2plus", "Low (2+)"),
                            (
                                "urn:etoegang:core:assurance-class:loa3",
                                "Substantial (3)",
                            ),
                            ("urn:etoegang:core:assurance-class:loa4", "High (4)"),
                        ],
                        help_text="Fallback level of assurance, in case no claim value could be extracted.",
                        max_length=100,
                        verbose_name="default LOA",
                    ),
                ),
                (
                    "kvk_loa_value_mapping",
                    django_jsonform.models.fields.JSONField(
                        blank=True,
                        default=list,
                        help_text="Level of assurance claim value mappings. Useful if the values in the LOA claim are proprietary, so you can translate them into their standardized identifiers.",
                        verbose_name="loa mapping",
                    ),
                ),
                (
                    "pseudo_claim",
                    mozilla_django_oidc_db.fields.ClaimField(
                        base_field=models.CharField(
                            max_length=50, verbose_name="claim path segment"
                        ),
                        default=mozilla_django_oidc_db.fields.ClaimFieldDefault(
                            "pbdf.sidn-pbdf.irma.pseudonym"
                        ),
                        help_text="Name of the claim holding the (opaque) identifier of the user. This claim will be used when the pseudo authentication option is used, or when the plugin is set to anonymous authentication (when no authentication options are selected).",
                        size=None,
                        verbose_name="pseudo identifier claim",
                    ),
                ),
            ],
            options={
                "verbose_name": "Yivi (OIDC)",
            },
        ),
    ]
