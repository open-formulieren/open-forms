# Generated by Django 4.2.23 on 2025-08-13 13:22


from django.db import migrations
from django.db.migrations.state import StateApps
from django.db.models import Q
from django.utils.text import slugify


def transform_set_attributegroup_slug(apps: StateApps, _):
    AttributeGroup = apps.get_model("yivi_oidc", "Attributegroup")

    # Get a set of slug that already exist
    occupied_slugs: set = set(
        AttributeGroup.objects.filter(~Q(slug=None)).values_list("slug", flat=True)
    )

    attribute_groups = AttributeGroup.objects.filter(slug=None)

    for attribute_group in attribute_groups:
        slugified_attribute_group = slugify(attribute_group.name)

        # Check if the slug is unique, if not add a suffix and check again
        addition = 1
        while slugified_attribute_group in occupied_slugs:
            slugified_attribute_group = slugify(attribute_group.name) + str(addition)
            addition += 1

        # Add the new slug to the `occupied` set and set the attribute group slug
        occupied_slugs.add(slugified_attribute_group)
        attribute_group.slug = slugified_attribute_group

    # Update the attribute groups
    AttributeGroup.objects.bulk_update(attribute_groups, fields=["slug"])


def reverse_set_attributegroup_slug(apps: StateApps, _):
    AttributeGroup = apps.get_model("yivi_oidc", "Attributegroup")

    # We reset all attribute groups
    attribute_groups = AttributeGroup.objects.all()

    for attribute_group in attribute_groups:
        attribute_group.slug = None

    AttributeGroup.objects.bulk_update(
        attribute_groups,
        fields=["slug"],
    )


class Migration(migrations.Migration):
    dependencies = [
        ("yivi_oidc", "0002_attributegroup_slug_alter_attributegroup_name"),
    ]

    operations = [
        migrations.RunPython(
            transform_set_attributegroup_slug,
            reverse_set_attributegroup_slug,
        ),
    ]
