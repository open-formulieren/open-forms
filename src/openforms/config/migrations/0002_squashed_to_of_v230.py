# Generated by Django 3.2.20 on 2023-09-08 10:33

import functools

import django.core.validators
from django.db import migrations, models

import django_jsonform.models.fields
import tinymce.models
from django.utils.translation import gettext_lazy as _
from django.core.exceptions import ValidationError

import openforms.config.models
import openforms.config.models.config
import openforms.emails.validators
import openforms.payments.validators
import openforms.template.validators
import openforms.utils.fields
import openforms.utils.translations


# Function removed from the code, moved here to not break the migration:
def validate_payment_order_id_prefix(value: str):
    value = value.replace("{year}", "")
    if value and not value.isalnum():
        raise ValidationError(
            _(
                "Prefix must be alpha numeric, no spaces or special characters except {year}"
            )
        )


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0001_initial_squashed_0022_merge_20210903_1228"),
    ]

    operations = [
        migrations.AddField(
            model_name="globalconfiguration",
            name="ask_privacy_consent",
            field=models.BooleanField(
                default=True,
                help_text="If enabled, the user will have to agree to the privacy policy before submitting a form.",
                verbose_name="ask privacy consent",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="privacy_policy_url",
            field=models.URLField(
                blank=True,
                help_text="URL to the privacy policy",
                verbose_name="privacy policy URL",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="payment_order_id_prefix",
            field=models.CharField(
                blank=True,
                default="{year}",
                help_text="Prefix to apply to generated numerical order IDs. Alpha-numerical only, supports placeholder {year}.",
                max_length=16,
                validators=[validate_payment_order_id_prefix],
                verbose_name="Payment Order ID prefix",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="confirmation_email_subject",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/subject.txt",),
                    **{}
                ),
                help_text="Subject of the confirmation email message. Can be overridden on the form level",
                max_length=1000,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="submission_confirmation_template",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Thank you for submitting this form.",),
                    **{}
                ),
                help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data.",
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="plugin_configuration",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Configuration of plugins for authentication, payments, prefill, registrations and validation",
                verbose_name="plugin configuration",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_display_required_with_asterisk",
            field=models.BooleanField(
                default=True,
                help_text="If checked, required fields are marked with an asterisk and optional fields are unmarked. If unchecked, optional fields will be marked with '(optional)' and required fields are unmarked.",
                verbose_name="Mark required fields with asterisks",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_fields_required_default",
            field=models.BooleanField(
                default=False,
                help_text="Whether the checkbox 'required' on form fields should be checked by default.",
                verbose_name="Mark form fields 'required' by default",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="registration_attempt_limit",
            field=models.PositiveIntegerField(
                default=5,
                help_text="How often we attempt to register the submission at the registration backend before giving up",
                validators=[django.core.validators.MinValueValidator(1)],
                verbose_name="default registration backend attempt limit",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="theme_classname",
            field=models.SlugField(
                blank=True,
                help_text="If provided, this class name will be set on the <html> element.",
                verbose_name="theme CSS class name",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="theme_stylesheet",
            field=models.URLField(
                blank=True,
                help_text="The URL stylesheet with theme-specific rules for your organization. This will be included as final stylesheet, overriding previously defined styles. Note that you also have to include the host to the `style-src` CSP directive. Example value: https://unpkg.com/@utrecht/design-tokens@1.0.0-alpha.20/dist/index.css.",
                max_length=1000,
                validators=[
                    django.core.validators.RegexValidator(
                        message="The URL must point to a CSS resource (.css extension).",
                        regex="\\.css$",
                    )
                ],
                verbose_name="theme stylesheet URL",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="save_form_email_subject",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/save_form/subject.txt",),
                    **{}
                ),
                help_text="Subject of the save form email message.",
                max_length=1000,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="theme_stylesheet_file",
            field=models.FileField(
                blank=True,
                help_text="A stylesheet with theme-specific rules for your organization. This will be included as final stylesheet, overriding previously defined styles. If both a URL to a stylesheet and a stylesheet file have been configured, the uploaded file is included after the stylesheet URL.",
                upload_to="config/themes/",
                validators=[
                    django.core.validators.FileExtensionValidator(
                        allowed_extensions=("css",)
                    )
                ],
                verbose_name="theme stylesheet",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="allow_indexing_form_detail",
            field=models.BooleanField(
                default=True,
                help_text="Whether form detail pages may be indexed and displayed in search engine result lists. Disable this to prevent listing.",
                verbose_name="Allow form page indexing",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="confirmation_email_subject_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/subject.txt",),
                    **{}
                ),
                help_text="Subject of the confirmation email message. Can be overridden on the form level",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="confirmation_email_subject_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/subject.txt",),
                    **{}
                ),
                help_text="Subject of the confirmation email message. Can be overridden on the form level",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_begin_text_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Begin form",), **{}
                ),
                help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form",
                max_length=50,
                null=True,
                verbose_name="begin text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_begin_text_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Begin form",), **{}
                ),
                help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form",
                max_length=50,
                null=True,
                verbose_name="begin text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_change_text_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Change",), **{}
                ),
                help_text="The text that will be displayed in the overview page to change a certain step",
                max_length=50,
                null=True,
                verbose_name="change text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_change_text_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Change",), **{}
                ),
                help_text="The text that will be displayed in the overview page to change a certain step",
                max_length=50,
                null=True,
                verbose_name="change text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_confirm_text_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Confirm",), **{}
                ),
                help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly",
                max_length=50,
                null=True,
                verbose_name="confirm text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_confirm_text_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Confirm",), **{}
                ),
                help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly",
                max_length=50,
                null=True,
                verbose_name="confirm text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_step_next_text_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Next",), **{}
                ),
                help_text="The text that will be displayed in the form step to go to the next step",
                max_length=50,
                null=True,
                verbose_name="step next text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_step_next_text_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Next",), **{}
                ),
                help_text="The text that will be displayed in the form step to go to the next step",
                max_length=50,
                null=True,
                verbose_name="step next text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_step_save_text_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Save current information",),
                    **{}
                ),
                help_text="The text that will be displayed in the form step to save the current information",
                max_length=50,
                null=True,
                verbose_name="step save text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_step_save_text_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Save current information",),
                    **{}
                ),
                help_text="The text that will be displayed in the form step to save the current information",
                max_length=50,
                null=True,
                verbose_name="step save text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="save_form_email_subject_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/save_form/subject.txt",),
                    **{}
                ),
                help_text="Subject of the save form email message.",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="save_form_email_subject_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/save_form/subject.txt",),
                    **{}
                ),
                help_text="Subject of the save form email message.",
                max_length=1000,
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_confirmation_template_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Thank you for submitting this form.",),
                    **{}
                ),
                help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data.",
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_confirmation_template_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *("Thank you for submitting this form.",),
                    **{}
                ),
                help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data.",
                null=True,
                validators=[openforms.template.validators.DjangoTemplateValidator()],
                verbose_name="submission confirmation template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_previous_text_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Previous page",), **{}
                ),
                help_text="The text that will be displayed in the overview page to go to the previous step",
                max_length=50,
                null=True,
                verbose_name="back to form text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_previous_text_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Previous page",), **{}
                ),
                help_text="The text that will be displayed in the overview page to go to the previous step",
                max_length=50,
                null=True,
                verbose_name="back to form text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_step_previous_text_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Previous page",), **{}
                ),
                help_text="The text that will be displayed in the form step to go to the previous step",
                max_length=50,
                null=True,
                verbose_name="previous step text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_step_previous_text_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Previous page",), **{}
                ),
                help_text="The text that will be displayed in the form step to go to the previous step",
                max_length=50,
                null=True,
                verbose_name="previous step text",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="organization_name",
            field=models.CharField(
                blank=True,
                help_text="The name of your organization that will be used as label for elements like the logo.",
                max_length=100,
                verbose_name="organization name",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="save_form_email_content",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/save_form/content.html",),
                    **{}
                ),
                help_text="Content of the save form email message.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="save_form_email_content_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/save_form/content.html",),
                    **{}
                ),
                help_text="Content of the save form email message.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="save_form_email_content_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/save_form/content.html",),
                    **{}
                ),
                help_text="Content of the save form email message.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_upload_default_file_types",
            field=django_jsonform.models.fields.ArrayField(
                base_field=models.CharField(
                    choices=[
                        ("*", "any filetype"),
                        ("image/heic", ".heic"),
                        ("image/png", ".png"),
                        ("image/jpeg", ".jpg"),
                        ("application/pdf", ".pdf"),
                        ("application/vnd.ms-excel", ".xls"),
                        (
                            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            ".xlsx",
                        ),
                        ("text/csv", ".csv"),
                        ("text/plain", ".txt"),
                        ("application/msword", ".doc"),
                        (
                            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                            ".docx",
                        ),
                        (
                            "application/vnd.oasis.opendocument.*,application/vnd.stardivision.*,application/vnd.sun.xml.*",
                            "Open Office",
                        ),
                        ("application/zip", ".zip"),
                        ("application/vnd.rar", ".rar"),
                        ("application/x-tar", ".tar"),
                        ("application/vnd.ms-outlook", ".msg"),
                        (
                            "application/acad.dwg,application/autocad_dwg.dwg,application/dwg.dwg,application/x-acad.dwg,application/x-autocad.dwg,application/x-dwg.dwg,drawing/dwg.dwg,image/vnd.dwg,image/x-dwg.dwg",
                            ".dwg",
                        ),
                    ],
                    max_length=256,
                ),
                blank=True,
                default=list,
                help_text="Provide a list of default allowed file upload types. If empty, all extensions are allowed.",
                size=None,
                verbose_name="Default allowed file upload types",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="privacy_policy_label",
            field=tinymce.models.HTMLField(
                blank=True,
                default="Ja, ik heb kennis genomen van het {% privacy_policy %} en geef uitdrukkelijk toestemming voor het verwerken van de door mij opgegeven gegevens.",
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="privacy_policy_label_en",
            field=tinymce.models.HTMLField(
                blank=True,
                default="Ja, ik heb kennis genomen van het {% privacy_policy %} en geef uitdrukkelijk toestemming voor het verwerken van de door mij opgegeven gegevens.",
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="privacy_policy_label_nl",
            field=tinymce.models.HTMLField(
                blank=True,
                default="Ja, ik heb kennis genomen van het {% privacy_policy %} en geef uitdrukkelijk toestemming voor het verwerken van de door mij opgegeven gegevens.",
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="favicon",
            field=openforms.utils.fields.SVGOrImageField(
                blank=True,
                help_text="Allow the uploading of a favicon, .png .jpg .svg and .ico are compatible.",
                upload_to="logo/",
                verbose_name="favicon",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="clamav_host",
            field=models.CharField(
                blank=True,
                help_text="Hostname or IP address where ClamAV is running.",
                max_length=1000,
                verbose_name="ClamAV server hostname",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="clamav_port",
            field=models.PositiveIntegerField(
                blank=True,
                default=3310,
                help_text="The TCP port on which ClamAV is listening.",
                null=True,
                validators=[django.core.validators.MaxValueValidator(65535)],
                verbose_name="ClamAV port number",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="clamav_timeout",
            field=models.PositiveSmallIntegerField(
                blank=True,
                help_text="ClamAV socket timeout expressed in seconds (optional).",
                null=True,
                validators=[django.core.validators.MaxValueValidator(60)],
                verbose_name="ClamAV socket timeout",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="enable_virus_scan",
            field=models.BooleanField(
                default=False,
                help_text="Whether the files uploaded by the users should be scanned by ClamAV virus scanner.In case a file is found to be infected, the file is deleted.",
                verbose_name="Enable virus scan",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="hide_non_applicable_steps",
            field=models.BooleanField(
                default=False,
                help_text="If checked, form steps that become non-applicable as a result of user input are hidden from the progress indicator display (by default, they are displayed but marked as non-applicable.)",
                verbose_name="Hide non-applicable form steps",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="enable_react_formio_builder",
            field=models.BooleanField(
                default=False,
                help_text="Use the experimental Form.io component builder implementation. Note that this falls back to the existing builder for components that are not supported yet.",
                verbose_name="enable new formio builder",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_report_download_link_title",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Download PDF",), **{}
                ),
                help_text="The title of the link to download the report of a submission.",
                max_length=128,
                verbose_name="submission report download link title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_report_download_link_title_en",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Download PDF",), **{}
                ),
                help_text="The title of the link to download the report of a submission.",
                max_length=128,
                null=True,
                verbose_name="submission report download link title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="submission_report_download_link_title_nl",
            field=models.CharField(
                default=functools.partial(
                    openforms.utils.translations.get_default, *("Download PDF",), **{}
                ),
                help_text="The title of the link to download the report of a submission.",
                max_length=128,
                null=True,
                verbose_name="submission report download link title",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="confirmation_email_content",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message. Can be overridden on the form level",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "appointment_information",
                            "payment_information",
                            "cosign_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="confirmation_email_content_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message. Can be overridden on the form level",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "appointment_information",
                            "payment_information",
                            "cosign_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="confirmation_email_content_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/confirmation/content.html",),
                    **{}
                ),
                help_text="Content of the confirmation email message. Can be overridden on the form level",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=[
                            "appointment_information",
                            "payment_information",
                            "cosign_information",
                        ],
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="content",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_map_default_latitude",
            field=models.FloatField(
                default=52.1326332,
                validators=[
                    django.core.validators.MinValueValidator(-180.0),
                    django.core.validators.MaxValueValidator(180.0),
                ],
                verbose_name="The default latitude for the leaflet map.",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_map_default_longitude",
            field=models.FloatField(
                default=5.291266,
                validators=[
                    django.core.validators.MinValueValidator(-90.0),
                    django.core.validators.MaxValueValidator(90.0),
                ],
                verbose_name="The default longitude for the leaflet map.",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="form_map_default_zoom_level",
            field=models.IntegerField(
                default=13,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(13),
                ],
                verbose_name="The default zoom level for the leaflet map.",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="ask_statement_of_truth",
            field=models.BooleanField(
                default=False,
                help_text="If enabled, the user will have to agree that they filled out the form truthfully before submitting it.",
                verbose_name="ask statement of truth",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="statement_of_truth_label",
            field=tinymce.models.HTMLField(
                blank=True,
                default="Ik verklaar dat ik deze aanvraag naar waarheid heb ingevuld en geen informatie heb verzwegen.",
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                verbose_name="statement of truth label",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="statement_of_truth_label_en",
            field=tinymce.models.HTMLField(
                blank=True,
                default="Ik verklaar dat ik deze aanvraag naar waarheid heb ingevuld en geen informatie heb verzwegen.",
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                null=True,
                verbose_name="statement of truth label",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="statement_of_truth_label_nl",
            field=tinymce.models.HTMLField(
                blank=True,
                default="Ik verklaar dat ik deze aanvraag naar waarheid heb ingevuld en geen informatie heb verzwegen.",
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                null=True,
                verbose_name="statement of truth label",
            ),
        ),
    ]
