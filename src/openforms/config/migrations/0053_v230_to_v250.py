# Generated by Django 3.2.23 on 2024-01-22 15:55

import functools
import uuid

import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
from django.core.management import call_command
from django.db import migrations, models
from django.utils.module_loading import import_string

import django_jsonform.models.fields
import tinymce.models

import openforms.template.validators
import openforms.utils.fields
import openforms.utils.translations

from ._design_tokens import (
    update_button_design_token_values,
    update_layout_design_token_values,
)

global_theme_config_to_dedicated_model = import_string(
    "openforms.config.migrations.0064_auto_20231206_0921."
    "global_theme_config_to_dedicated_model"
)
dedicated_model_to_global_configuration = import_string(
    "openforms.config.migrations.0064_auto_20231206_0921."
    "dedicated_model_to_global_configuration"
)


def create_csp_form_action_configs(apps, schema_editor):
    call_command("create_csp_form_action_directives_from_config")


def set_theme_uuid(apps, _):
    Theme = apps.get_model("config", "Theme")
    for theme in Theme.objects.all():
        theme.uuid = uuid.uuid4()
        theme.save()


class Migration(migrations.Migration):

    replaces = [
        ("config", "0053_auto_20230830_1432"),
        ("config", "0054_auto_20230908_1046"),
        ("config", "0055_auto_20230911_2131"),
        ("config", "0056_globalconfiguration_show_form_link_in_cosign_email"),
        ("config", "0057_globalconfiguration_recipients_email_digest"),
        ("config", "0058_auto_20231026_1525"),
        ("config", "0059_convert_button_design_tokens"),
        ("config", "0060_create_csp_form_action_configs"),
        ("config", "0061_convert_container_layout_design_tokens"),
        ("config", "0062_cspsetting_identifier"),
        ("config", "0063_auto_20231122_1816"),
        ("config", "0064_auto_20231206_0921"),
        ("config", "0065_theme_uuid"),
        ("config", "0066_globalconfiguration_wait_for_payment_to_register"),
        ("config", "0067_alter_globalconfiguration_enable_react_formio_builder"),
        ("config", "0068_globalconfiguration_organization_oin"),
    ]

    dependencies = [
        ("payments_ogone", "0002_auto_20210902_2120"),
        ("config", "0002_squashed_to_of_v230"),
        ("digid_eherkenning", "0006_digidconfiguration_metadata_file_source_and_more"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.AlterField(
            model_name="globalconfiguration",
            name="privacy_policy_label",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Ja, ik heb kennis genomen van het {% privacy_policy %} en geef uitdrukkelijk toestemming voor het verwerken van de door mij opgegeven gegevens.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="privacy_policy_label_en",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Ja, ik heb kennis genomen van het {% privacy_policy %} en geef uitdrukkelijk toestemming voor het verwerken van de door mij opgegeven gegevens.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="privacy_policy_label_nl",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Ja, ik heb kennis genomen van het {% privacy_policy %} en geef uitdrukkelijk toestemming voor het verwerken van de door mij opgegeven gegevens.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="statement_of_truth_label",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Ik verklaar dat ik deze aanvraag naar waarheid heb ingevuld en geen informatie heb verzwegen.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                verbose_name="statement of truth label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="statement_of_truth_label_en",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Ik verklaar dat ik deze aanvraag naar waarheid heb ingevuld en geen informatie heb verzwegen.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                null=True,
                verbose_name="statement of truth label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="statement_of_truth_label_nl",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Ik verklaar dat ik deze aanvraag naar waarheid heb ingevuld en geen informatie heb verzwegen.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                null=True,
                verbose_name="statement of truth label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="privacy_policy_label",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Yes, I have read the {% privacy_policy %} and explicitly agree to the processing of my submitted information.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="privacy_policy_label_en",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Yes, I have read the {% privacy_policy %} and explicitly agree to the processing of my submitted information.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="privacy_policy_label_nl",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "Yes, I have read the {% privacy_policy %} and explicitly agree to the processing of my submitted information.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend",
                        required_template_tags=["privacy_policy"],
                    )
                ],
                verbose_name="privacy policy label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="statement_of_truth_label",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "I declare that I have filled out the form truthfully and have not omitted any information.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                verbose_name="statement of truth label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="statement_of_truth_label_en",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "I declare that I have filled out the form truthfully and have not omitted any information.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                null=True,
                verbose_name="statement of truth label",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="statement_of_truth_label_nl",
            field=tinymce.models.HTMLField(
                blank=True,
                default=functools.partial(
                    openforms.utils.translations.get_default,
                    *(
                        "I declare that I have filled out the form truthfully and have not omitted any information.",
                    ),
                    **{}
                ),
                help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                null=True,
                verbose_name="statement of truth label",
            ),
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="default_test_bsn",
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="default_test_kvk",
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="show_form_link_in_cosign_email",
            field=models.BooleanField(
                default=True,
                help_text="When enabled, a link to the form is shown in the co-sign email.",
                verbose_name="show form link in co-sign email",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="recipients_email_digest",
            field=django_jsonform.models.fields.ArrayField(
                base_field=models.EmailField(max_length=254),
                blank=True,
                default=list,
                help_text="The email addresses that should receive a daily report of items requiring attention.",
                size=None,
                verbose_name="recipients email digest",
            ),
        ),
        migrations.AddField(
            model_name="cspsetting",
            name="content_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="contenttypes.contenttype",
                verbose_name="content type",
            ),
        ),
        migrations.AddField(
            model_name="cspsetting",
            name="object_id",
            field=models.TextField(blank=True, db_index=True, verbose_name="object id"),
        ),
        migrations.AlterField(
            model_name="cspsetting",
            name="value",
            field=models.CharField(
                help_text="CSP header value", max_length=255, verbose_name="value"
            ),
        ),
        migrations.RunPython(
            code=update_button_design_token_values,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=create_csp_form_action_configs,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_layout_design_token_values,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="cspsetting",
            name="directive",
            field=models.CharField(
                choices=[
                    ("default-src", "default-src"),
                    ("script-src", "script-src"),
                    ("script-src-attr", "script-src-attr"),
                    ("script-src-elem", "script-src-elem"),
                    ("img-src", "img-src"),
                    ("object-src", "object-src"),
                    ("prefetch-src", "prefetch-src"),
                    ("media-src", "media-src"),
                    ("frame-src", "frame-src"),
                    ("font-src", "font-src"),
                    ("connect-src", "connect-src"),
                    ("style-src", "style-src"),
                    ("style-src-attr", "style-src-attr"),
                    ("style-src-elem", "style-src-elem"),
                    ("base-uri", "base-uri"),
                    ("child-src", "child-src"),
                    ("frame-ancestors", "frame-ancestors"),
                    ("navigate-to", "navigate-to"),
                    ("form-action", "form-action"),
                    ("sandbox", "sandbox"),
                    ("report-uri", "report-uri"),
                    ("report-to", "report-to"),
                    ("manifest-src", "manifest-src"),
                    ("worker-src", "worker-src"),
                    ("plugin-types", "plugin-types"),
                    ("require-sri-for", "require-sri-for"),
                ],
                help_text="CSP header directive.",
                max_length=64,
                verbose_name="directive",
            ),
        ),
        migrations.AddField(
            model_name="cspsetting",
            name="identifier",
            field=models.CharField(
                blank=True,
                help_text="An extra tag for this CSP entry, to identify the exact source.",
                max_length=64,
                verbose_name="identifier",
            ),
        ),
        migrations.AlterField(
            model_name="cspsetting",
            name="value",
            field=models.CharField(
                help_text="CSP header value.", max_length=255, verbose_name="value"
            ),
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="An easily recognizable name for the theme, used to identify it.",
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "logo",
                    openforms.utils.fields.SVGOrImageField(
                        blank=True,
                        help_text="Upload the theme/orgnization logo, visible to users filling out forms. We advise dimensions around 150px by 75px. SVG's are permitted.",
                        upload_to="logo/",
                        verbose_name="theme logo",
                    ),
                ),
                (
                    "classname",
                    models.SlugField(
                        blank=True,
                        help_text="If provided, this class name will be set on the <html> element.",
                        verbose_name="theme CSS class name",
                    ),
                ),
                (
                    "stylesheet",
                    models.URLField(
                        blank=True,
                        help_text="The URL stylesheet with theme-specific rules for your organization. This will be included as final stylesheet, overriding previously defined styles. Note that you also have to include the host to the `style-src` CSP directive. Example value: https://unpkg.com/@utrecht/design-tokens@1.0.0-alpha.20/dist/index.css.",
                        max_length=1000,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="The URL must point to a CSS resource (.css extension).",
                                regex="\\.css$",
                            )
                        ],
                        verbose_name="theme stylesheet URL",
                    ),
                ),
                (
                    "stylesheet_file",
                    models.FileField(
                        blank=True,
                        help_text="A stylesheet with theme-specific rules for your organization. This will be included as final stylesheet, overriding previously defined styles. If both a URL to a stylesheet and a stylesheet file have been configured, the uploaded file is included after the stylesheet URL.",
                        upload_to="config/themes/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=("css",)
                            )
                        ],
                        verbose_name="theme stylesheet",
                    ),
                ),
                (
                    "design_token_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Values of various style parameters, such as border radii, background colors... Note that this is advanced usage. Any available but un-specified values will use fallback default values. See https://open-forms.readthedocs.io/en/latest/installation/form_hosting.html#run-time-configuration for documentation.",
                        verbose_name="design token values",
                    ),
                ),
            ],
            options={
                "verbose_name": "theme",
                "verbose_name_plural": "themes",
            },
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="default_theme",
            field=models.OneToOneField(
                blank=True,
                help_text="If no explicit theme is configured, the configured default theme will be used as a fallback.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="config.theme",
                verbose_name="default theme",
            ),
        ),
        migrations.RunPython(
            code=global_theme_config_to_dedicated_model,
            reverse_code=dedicated_model_to_global_configuration,
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="design_token_values",
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="logo",
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="theme_classname",
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="theme_stylesheet",
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="theme_stylesheet_file",
        ),
        migrations.AddField(
            model_name="theme",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, verbose_name="UUID"
            ),
        ),
        migrations.RunPython(
            code=set_theme_uuid,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="theme",
            name="uuid",
            field=models.UUIDField(
                default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID"
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="wait_for_payment_to_register",
            field=models.BooleanField(
                default=False,
                help_text="Should a submission be processed (sent to the registration backend) only after payment has been received?",
                verbose_name="wait for payment to register",
            ),
        ),
        migrations.AlterField(
            model_name="globalconfiguration",
            name="enable_react_formio_builder",
            field=models.BooleanField(
                default=True,
                help_text="Use the new Form.io component builder implementation.",
                verbose_name="enable new formio builder",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="organization_oin",
            field=models.CharField(
                blank=True,
                help_text="The OIN of the organization.",
                max_length=20,
                verbose_name="organization OIN",
            ),
        ),
    ]
