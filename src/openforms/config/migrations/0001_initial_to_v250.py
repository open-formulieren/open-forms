# Generated by Django 4.2.10 on 2024-02-22 18:09

import colorsys
import functools
import re
import uuid
from io import StringIO

import django.core.validators
from django.core.exceptions import ValidationError
import django.db.migrations.operations.special
from django.utils.translation import gettext_lazy as _
import django.db.models.deletion
from django.core.management import call_command
from django.db import migrations, models

import colorfield.fields
import django_jsonform.models.fields
import tinymce.models

import openforms.config.models.config
import openforms.emails.validators
import openforms.payments.validators
import openforms.template.validators
import openforms.utils.fields
import openforms.utils.translations


# Function removed from the code, moved here to not break the migration:
def validate_payment_order_id_prefix(value: str):
    value = value.replace("{year}", "")
    if value and not value.isalnum():
        raise ValidationError(
            _(
                "Prefix must be alpha numeric, no spaces or special characters except {year}"
            )
        )


def load_cookiegroups(*args):
    call_command("loaddata", "cookie_consent", stdout=StringIO())


# default colors from CKEditor source code (in CSS HSL format)
# via https://github.com/ckeditor/ckeditor5/blob/master/packages/ckeditor5-font/src/fontcolor/fontcolorediting.js
default_cke_values = [
    {"color": "hsl(0, 0%, 0%)", "label": "Black"},
    {"color": "hsl(0, 0%, 30%)", "label": "Dim grey"},
    {"color": "hsl(0, 0%, 60%)", "label": "Grey"},
    {"color": "hsl(0, 0%, 90%)", "label": "Light grey"},
    {
        "color": "hsl(0, 0%, 100%)",
        "label": "White",
    },
    {"color": "hsl(0, 75%, 60%)", "label": "Red"},
    {"color": "hsl(30, 75%, 60%)", "label": "Orange"},
    {"color": "hsl(60, 75%, 60%)", "label": "Yellow"},
    {"color": "hsl(90, 75%, 60%)", "label": "Light green"},
    {"color": "hsl(120, 75%, 60%)", "label": "Green"},
    {"color": "hsl(150, 75%, 60%)", "label": "Aquamarine"},
    {"color": "hsl(180, 75%, 60%)", "label": "Turquoise"},
    {"color": "hsl(210, 75%, 60%)", "label": "Light blue"},
    {"color": "hsl(240, 75%, 60%)", "label": "Blue"},
    {"color": "hsl(270, 75%, 60%)", "label": "Purple"},
]


def hsl_to_rgbhex(hsl_css_color):
    exp = "^hsl\((\d+), (\d+)%, (\d+)%\)$"
    m = re.match(exp, hsl_css_color)
    if m:
        h = int(m.group(1))
        s = int(m.group(2))
        l = int(m.group(3))

        # conversion algorithm via https://stackoverflow.com/questions/41403936/converting-hsl-to-hex-in-python3
        rgb = colorsys.hls_to_rgb(h / 360, l / 100, s / 100)
        hex = "#%02x%02x%02x" % (
            round(rgb[0] * 255),
            round(rgb[1] * 255),
            round(rgb[2] * 255),
        )
        return hex


def add_colors(apps, schema_editor):
    RichTextColor = apps.get_model("config", "RichTextColor")

    for elem in default_cke_values:
        hex_color = hsl_to_rgbhex(elem["color"])
        if not hex_color:
            continue
        RichTextColor.objects.create(label=elem["label"], color=hex_color)


def remove_colors(apps, schema_editor):
    RichTextColor = apps.get_model("config", "RichTextColor")
    RichTextColor.objects.all().delete()


class Migration(migrations.Migration):

    replaces = [
        ("config", "0001_initial_squashed_0022_merge_20210903_1228"),
        ("config", "0002_squashed_to_of_v230"),
        ("config", "0053_v230_to_v250"),
    ]

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("digid_eherkenning", "0006_digidconfiguration_metadata_file_source_and_more"),
        ("payments_ogone", "0002_auto_20210902_2120"),
        ("cookie_consent", "0002_auto__add_logitem"),
    ]

    operations = [
        migrations.RunPython(
            code=load_cookiegroups,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name="RichTextColor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "color",
                    colorfield.fields.ColorField(
                        default="#FFFFFF",
                        help_text="Color in RGB hex format (#RRGGBB)",
                        image_field=None,
                        max_length=18,
                        samples=None,
                        verbose_name="color",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Human readable label for reference",
                        max_length=64,
                        verbose_name="label",
                    ),
                ),
            ],
            options={
                "verbose_name": "text editor color preset",
                "verbose_name_plural": "text editor color presets",
                "ordering": ("label",),
            },
        ),
        migrations.RunPython(code=add_colors, reverse_code=remove_colors),
        migrations.CreateModel(
            name="CSPSetting",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "directive",
                    models.CharField(
                        choices=[
                            ("default-src", "default-src"),
                            ("script-src", "script-src"),
                            ("script-src-attr", "script-src-attr"),
                            ("script-src-elem", "script-src-elem"),
                            ("img-src", "img-src"),
                            ("object-src", "object-src"),
                            ("prefetch-src", "prefetch-src"),
                            ("media-src", "media-src"),
                            ("frame-src", "frame-src"),
                            ("font-src", "font-src"),
                            ("connect-src", "connect-src"),
                            ("style-src", "style-src"),
                            ("style-src-attr", "style-src-attr"),
                            ("style-src-elem", "style-src-elem"),
                            ("base-uri", "base-uri"),
                            ("child-src", "child-src"),
                            ("frame-ancestors", "frame-ancestors"),
                            ("navigate-to", "navigate-to"),
                            ("form-action", "form-action"),
                            ("sandbox", "sandbox"),
                            ("report-uri", "report-uri"),
                            ("report-to", "report-to"),
                            ("manifest-src", "manifest-src"),
                            ("worker-src", "worker-src"),
                            ("plugin-types", "plugin-types"),
                            ("require-sri-for", "require-sri-for"),
                        ],
                        help_text="CSP header directive.",
                        max_length=64,
                        verbose_name="directive",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="CSP header value.",
                        max_length=255,
                        verbose_name="value",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "object_id",
                    models.TextField(
                        blank=True, db_index=True, verbose_name="object id"
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        blank=True,
                        help_text="An extra tag for this CSP entry, to identify the exact source.",
                        max_length=64,
                        verbose_name="identifier",
                    ),
                ),
            ],
            options={
                "ordering": ("directive", "value"),
            },
        ),
        migrations.CreateModel(
            name="Theme",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="An easily recognizable name for the theme, used to identify it.",
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "logo",
                    openforms.utils.fields.SVGOrImageField(
                        blank=True,
                        help_text="Upload the theme/orgnization logo, visible to users filling out forms. We advise dimensions around 150px by 75px. SVG's are permitted.",
                        upload_to="logo/",
                        verbose_name="theme logo",
                    ),
                ),
                (
                    "classname",
                    models.SlugField(
                        blank=True,
                        help_text="If provided, this class name will be set on the <html> element.",
                        verbose_name="theme CSS class name",
                    ),
                ),
                (
                    "stylesheet",
                    models.URLField(
                        blank=True,
                        help_text="The URL stylesheet with theme-specific rules for your organization. This will be included as final stylesheet, overriding previously defined styles. Note that you also have to include the host to the `style-src` CSP directive. Example value: https://unpkg.com/@utrecht/design-tokens@1.0.0-alpha.20/dist/index.css.",
                        max_length=1000,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="The URL must point to a CSS resource (.css extension).",
                                regex="\\.css$",
                            )
                        ],
                        verbose_name="theme stylesheet URL",
                    ),
                ),
                (
                    "stylesheet_file",
                    models.FileField(
                        blank=True,
                        help_text="A stylesheet with theme-specific rules for your organization. This will be included as final stylesheet, overriding previously defined styles. If both a URL to a stylesheet and a stylesheet file have been configured, the uploaded file is included after the stylesheet URL.",
                        upload_to="config/themes/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=("css",)
                            )
                        ],
                        verbose_name="theme stylesheet",
                    ),
                ),
                (
                    "design_token_values",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Values of various style parameters, such as border radii, background colors... Note that this is advanced usage. Any available but un-specified values will use fallback default values. See https://open-forms.readthedocs.io/en/latest/installation/form_hosting.html#run-time-configuration for documentation.",
                        verbose_name="design token values",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="UUID",
                    ),
                ),
            ],
            options={
                "verbose_name": "theme",
                "verbose_name_plural": "themes",
            },
        ),
        migrations.CreateModel(
            name="GlobalConfiguration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "email_template_netloc_allowlist",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.CharField(max_length=1000),
                        blank=True,
                        default=list,
                        help_text="Provide a list of allowed domains (without 'https://www').Hyperlinks in a (confirmation) email are removed, unless the domain is provided here.",
                        size=None,
                        verbose_name="allowed email domain names",
                    ),
                ),
                (
                    "display_sdk_information",
                    models.BooleanField(
                        default=False,
                        help_text="When enabled, information about the used SDK is displayed.",
                        verbose_name="display SDK information",
                    ),
                ),
                (
                    "submission_confirmation_template",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Thank you for submitting this form.",),
                            **{}
                        ),
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data.",
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "allow_empty_initiator",
                    models.BooleanField(
                        default=False,
                        help_text="When enabled and the submitter is not authenticated, a case is created without any initiator. Otherwise, a fake initiator is added with BSN 111222333.",
                        verbose_name="allow empty initiator",
                    ),
                ),
                (
                    "form_begin_text",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Begin form",),
                            **{}
                        ),
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form",
                        max_length=50,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "form_change_text",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default, *("Change",), **{}
                        ),
                        help_text="The text that will be displayed in the overview page to change a certain step",
                        max_length=50,
                        verbose_name="change text",
                    ),
                ),
                (
                    "form_confirm_text",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Confirm",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly",
                        max_length=50,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "form_previous_text",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Previous page",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the overview page to go to the previous step",
                        max_length=50,
                        verbose_name="back to form text",
                    ),
                ),
                (
                    "form_step_next_text",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default, *("Next",), **{}
                        ),
                        help_text="The text that will be displayed in the form step to go to the next step",
                        max_length=50,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "form_step_previous_text",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Previous page",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the form step to go to the previous step",
                        max_length=50,
                        verbose_name="previous step text",
                    ),
                ),
                (
                    "form_step_save_text",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Save current information",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the form step to save the current information",
                        max_length=50,
                        verbose_name="step save text",
                    ),
                ),
                (
                    "admin_session_timeout",
                    models.PositiveIntegerField(
                        default=60,
                        help_text="Amount of time in minutes the admin can be inactive for before being logged out",
                        validators=[django.core.validators.MinValueValidator(5)],
                        verbose_name="admin session timeout",
                    ),
                ),
                (
                    "form_session_timeout",
                    models.PositiveIntegerField(
                        default=15,
                        help_text="Amount of time in minutes a user filling in a form can be inactive for before being logged out",
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(
                                15,
                                message="Due to DigiD requirements this value has to be less than or equal to %(limit_value)s minutes.",
                            ),
                        ],
                        verbose_name="form session timeout",
                    ),
                ),
                (
                    "main_website",
                    models.URLField(
                        blank=True,
                        help_text="URL to the main website. Used for the 'back to municipality website' link.",
                        verbose_name="main website link",
                    ),
                ),
                (
                    "enable_demo_plugins",
                    models.BooleanField(
                        default=False,
                        help_text="If enabled, the admin allows selection of demo backend plugins.",
                        verbose_name="enable demo plugins",
                    ),
                ),
                (
                    "all_submissions_removal_limit",
                    models.PositiveIntegerField(
                        default=90,
                        help_text="Amount of days when all submissions will be permanently deleted",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="all submissions removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_limit",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Amount of days errored submissions will remain before being removed",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="errored submission removal limit",
                    ),
                ),
                (
                    "errored_submissions_removal_method",
                    models.CharField(
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        default="delete_permanently",
                        help_text="How errored submissions will be removed after the",
                        max_length=50,
                        verbose_name="errored submissions removal method",
                    ),
                ),
                (
                    "incomplete_submissions_removal_limit",
                    models.PositiveIntegerField(
                        default=7,
                        help_text="Amount of days incomplete submissions will remain before being removed",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="incomplete submission removal limit",
                    ),
                ),
                (
                    "incomplete_submissions_removal_method",
                    models.CharField(
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        default="delete_permanently",
                        help_text="How incomplete submissions will be removed after the limit",
                        max_length=50,
                        verbose_name="incomplete submissions removal method",
                    ),
                ),
                (
                    "successful_submissions_removal_limit",
                    models.PositiveIntegerField(
                        default=7,
                        help_text="Amount of days successful submissions will remain before being removed",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="successful submission removal limit",
                    ),
                ),
                (
                    "successful_submissions_removal_method",
                    models.CharField(
                        choices=[
                            ("delete_permanently", "Submissions will be deleted"),
                            (
                                "make_anonymous",
                                "Sensitive data within the submissions will be deleted",
                            ),
                        ],
                        default="delete_permanently",
                        help_text="How successful submissions will be removed after the limit",
                        max_length=50,
                        verbose_name="successful submissions removal method",
                    ),
                ),
                (
                    "ask_privacy_consent",
                    models.BooleanField(
                        default=True,
                        help_text="If enabled, the user will have to agree to the privacy policy before submitting a form.",
                        verbose_name="ask privacy consent",
                    ),
                ),
                (
                    "privacy_policy_url",
                    models.URLField(
                        blank=True,
                        help_text="URL to the privacy policy",
                        verbose_name="privacy policy URL",
                    ),
                ),
                (
                    "payment_order_id_prefix",
                    models.CharField(
                        blank=True,
                        default="{year}",
                        help_text="Prefix to apply to generated numerical order IDs. Alpha-numerical only, supports placeholder {year}.",
                        max_length=16,
                        validators=[validate_payment_order_id_prefix],
                        verbose_name="Payment Order ID prefix",
                    ),
                ),
                (
                    "confirmation_email_subject",
                    models.CharField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/confirmation/subject.txt",),
                            **{}
                        ),
                        help_text="Subject of the confirmation email message. Can be overridden on the form level",
                        max_length=1000,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="subject",
                    ),
                ),
                (
                    "plugin_configuration",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuration of plugins for authentication, payments, prefill, registrations and validation",
                        verbose_name="plugin configuration",
                    ),
                ),
                (
                    "form_display_required_with_asterisk",
                    models.BooleanField(
                        default=True,
                        help_text="If checked, required fields are marked with an asterisk and optional fields are unmarked. If unchecked, optional fields will be marked with '(optional)' and required fields are unmarked.",
                        verbose_name="Mark required fields with asterisks",
                    ),
                ),
                (
                    "form_fields_required_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the checkbox 'required' on form fields should be checked by default.",
                        verbose_name="Mark form fields 'required' by default",
                    ),
                ),
                (
                    "registration_attempt_limit",
                    models.PositiveIntegerField(
                        default=5,
                        help_text="How often we attempt to register the submission at the registration backend before giving up",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="default registration backend attempt limit",
                    ),
                ),
                (
                    "save_form_email_subject",
                    models.CharField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/save_form/subject.txt",),
                            **{}
                        ),
                        help_text="Subject of the save form email message.",
                        max_length=1000,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="subject",
                    ),
                ),
                (
                    "allow_indexing_form_detail",
                    models.BooleanField(
                        default=True,
                        help_text="Whether form detail pages may be indexed and displayed in search engine result lists. Disable this to prevent listing.",
                        verbose_name="Allow form page indexing",
                    ),
                ),
                (
                    "confirmation_email_subject_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/confirmation/subject.txt",),
                            **{}
                        ),
                        help_text="Subject of the confirmation email message. Can be overridden on the form level",
                        max_length=1000,
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="subject",
                    ),
                ),
                (
                    "confirmation_email_subject_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/confirmation/subject.txt",),
                            **{}
                        ),
                        help_text="Subject of the confirmation email message. Can be overridden on the form level",
                        max_length=1000,
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="subject",
                    ),
                ),
                (
                    "form_begin_text_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Begin form",),
                            **{}
                        ),
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form",
                        max_length=50,
                        null=True,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "form_begin_text_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Begin form",),
                            **{}
                        ),
                        help_text="The text that will be displayed at the start of the form to indicate the user can begin to fill in the form",
                        max_length=50,
                        null=True,
                        verbose_name="begin text",
                    ),
                ),
                (
                    "form_change_text_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default, *("Change",), **{}
                        ),
                        help_text="The text that will be displayed in the overview page to change a certain step",
                        max_length=50,
                        null=True,
                        verbose_name="change text",
                    ),
                ),
                (
                    "form_change_text_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default, *("Change",), **{}
                        ),
                        help_text="The text that will be displayed in the overview page to change a certain step",
                        max_length=50,
                        null=True,
                        verbose_name="change text",
                    ),
                ),
                (
                    "form_confirm_text_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Confirm",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly",
                        max_length=50,
                        null=True,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "form_confirm_text_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Confirm",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the overview page to confirm the form is filled in correctly",
                        max_length=50,
                        null=True,
                        verbose_name="confirm text",
                    ),
                ),
                (
                    "form_step_next_text_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default, *("Next",), **{}
                        ),
                        help_text="The text that will be displayed in the form step to go to the next step",
                        max_length=50,
                        null=True,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "form_step_next_text_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default, *("Next",), **{}
                        ),
                        help_text="The text that will be displayed in the form step to go to the next step",
                        max_length=50,
                        null=True,
                        verbose_name="step next text",
                    ),
                ),
                (
                    "form_step_save_text_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Save current information",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the form step to save the current information",
                        max_length=50,
                        null=True,
                        verbose_name="step save text",
                    ),
                ),
                (
                    "form_step_save_text_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Save current information",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the form step to save the current information",
                        max_length=50,
                        null=True,
                        verbose_name="step save text",
                    ),
                ),
                (
                    "save_form_email_subject_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/save_form/subject.txt",),
                            **{}
                        ),
                        help_text="Subject of the save form email message.",
                        max_length=1000,
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="subject",
                    ),
                ),
                (
                    "save_form_email_subject_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/save_form/subject.txt",),
                            **{}
                        ),
                        help_text="Subject of the save form email message.",
                        max_length=1000,
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="subject",
                    ),
                ),
                (
                    "submission_confirmation_template_en",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Thank you for submitting this form.",),
                            **{}
                        ),
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "submission_confirmation_template_nl",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Thank you for submitting this form.",),
                            **{}
                        ),
                        help_text="The content of the submission confirmation page. It can contain variables that will be templated from the submitted form data.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator()
                        ],
                        verbose_name="submission confirmation template",
                    ),
                ),
                (
                    "form_previous_text_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Previous page",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the overview page to go to the previous step",
                        max_length=50,
                        null=True,
                        verbose_name="back to form text",
                    ),
                ),
                (
                    "form_previous_text_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Previous page",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the overview page to go to the previous step",
                        max_length=50,
                        null=True,
                        verbose_name="back to form text",
                    ),
                ),
                (
                    "form_step_previous_text_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Previous page",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the form step to go to the previous step",
                        max_length=50,
                        null=True,
                        verbose_name="previous step text",
                    ),
                ),
                (
                    "form_step_previous_text_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Previous page",),
                            **{}
                        ),
                        help_text="The text that will be displayed in the form step to go to the previous step",
                        max_length=50,
                        null=True,
                        verbose_name="previous step text",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True,
                        help_text="The name of your organization that will be used as label for elements like the logo.",
                        max_length=100,
                        verbose_name="organization name",
                    ),
                ),
                (
                    "save_form_email_content",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/save_form/content.html",),
                            **{}
                        ),
                        help_text="Content of the save form email message.",
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend"
                            ),
                            openforms.emails.validators.URLSanitationValidator(),
                        ],
                        verbose_name="content",
                    ),
                ),
                (
                    "save_form_email_content_en",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/save_form/content.html",),
                            **{}
                        ),
                        help_text="Content of the save form email message.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend"
                            ),
                            openforms.emails.validators.URLSanitationValidator(),
                        ],
                        verbose_name="content",
                    ),
                ),
                (
                    "save_form_email_content_nl",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/save_form/content.html",),
                            **{}
                        ),
                        help_text="Content of the save form email message.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend"
                            ),
                            openforms.emails.validators.URLSanitationValidator(),
                        ],
                        verbose_name="content",
                    ),
                ),
                (
                    "form_upload_default_file_types",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("*", "any filetype"),
                                ("image/heic", ".heic"),
                                ("image/png", ".png"),
                                ("image/jpeg", ".jpg"),
                                ("application/pdf", ".pdf"),
                                ("application/vnd.ms-excel", ".xls"),
                                (
                                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                    ".xlsx",
                                ),
                                ("text/csv", ".csv"),
                                ("text/plain", ".txt"),
                                ("application/msword", ".doc"),
                                (
                                    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    ".docx",
                                ),
                                (
                                    "application/vnd.oasis.opendocument.*,application/vnd.stardivision.*,application/vnd.sun.xml.*",
                                    "Open Office",
                                ),
                                ("application/zip", ".zip"),
                                ("application/vnd.rar", ".rar"),
                                ("application/x-tar", ".tar"),
                                ("application/vnd.ms-outlook", ".msg"),
                                (
                                    "application/acad.dwg,application/autocad_dwg.dwg,application/dwg.dwg,application/x-acad.dwg,application/x-autocad.dwg,application/x-dwg.dwg,drawing/dwg.dwg,image/vnd.dwg,image/x-dwg.dwg",
                                    ".dwg",
                                ),
                            ],
                            max_length=256,
                        ),
                        blank=True,
                        default=list,
                        help_text="Provide a list of default allowed file upload types. If empty, all extensions are allowed.",
                        size=None,
                        verbose_name="Default allowed file upload types",
                    ),
                ),
                (
                    "privacy_policy_label",
                    tinymce.models.HTMLField(
                        blank=True,
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *(
                                "Yes, I have read the {% privacy_policy %} and explicitly agree to the processing of my submitted information.",
                            ),
                            **{}
                        ),
                        help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend",
                                required_template_tags=["privacy_policy"],
                            )
                        ],
                        verbose_name="privacy policy label",
                    ),
                ),
                (
                    "privacy_policy_label_en",
                    tinymce.models.HTMLField(
                        blank=True,
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *(
                                "Yes, I have read the {% privacy_policy %} and explicitly agree to the processing of my submitted information.",
                            ),
                            **{}
                        ),
                        help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend",
                                required_template_tags=["privacy_policy"],
                            )
                        ],
                        verbose_name="privacy policy label",
                    ),
                ),
                (
                    "privacy_policy_label_nl",
                    tinymce.models.HTMLField(
                        blank=True,
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *(
                                "Yes, I have read the {% privacy_policy %} and explicitly agree to the processing of my submitted information.",
                            ),
                            **{}
                        ),
                        help_text="The label of the checkbox that prompts the user to agree to the privacy policy.",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend",
                                required_template_tags=["privacy_policy"],
                            )
                        ],
                        verbose_name="privacy policy label",
                    ),
                ),
                (
                    "favicon",
                    openforms.utils.fields.SVGOrImageField(
                        blank=True,
                        help_text="Allow the uploading of a favicon, .png .jpg .svg and .ico are compatible.",
                        upload_to="logo/",
                        verbose_name="favicon",
                    ),
                ),
                (
                    "clamav_host",
                    models.CharField(
                        blank=True,
                        help_text="Hostname or IP address where ClamAV is running.",
                        max_length=1000,
                        verbose_name="ClamAV server hostname",
                    ),
                ),
                (
                    "clamav_port",
                    models.PositiveIntegerField(
                        blank=True,
                        default=3310,
                        help_text="The TCP port on which ClamAV is listening.",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(65535)],
                        verbose_name="ClamAV port number",
                    ),
                ),
                (
                    "clamav_timeout",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="ClamAV socket timeout expressed in seconds (optional).",
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(60)],
                        verbose_name="ClamAV socket timeout",
                    ),
                ),
                (
                    "enable_virus_scan",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the files uploaded by the users should be scanned by ClamAV virus scanner.In case a file is found to be infected, the file is deleted.",
                        verbose_name="Enable virus scan",
                    ),
                ),
                (
                    "hide_non_applicable_steps",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, form steps that become non-applicable as a result of user input are hidden from the progress indicator display (by default, they are displayed but marked as non-applicable.)",
                        verbose_name="Hide non-applicable form steps",
                    ),
                ),
                (
                    "enable_react_formio_builder",
                    models.BooleanField(
                        default=True,
                        help_text="Use the new Form.io component builder implementation.",
                        verbose_name="enable new formio builder",
                    ),
                ),
                (
                    "submission_report_download_link_title",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Download PDF",),
                            **{}
                        ),
                        help_text="The title of the link to download the report of a submission.",
                        max_length=128,
                        verbose_name="submission report download link title",
                    ),
                ),
                (
                    "submission_report_download_link_title_en",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Download PDF",),
                            **{}
                        ),
                        help_text="The title of the link to download the report of a submission.",
                        max_length=128,
                        null=True,
                        verbose_name="submission report download link title",
                    ),
                ),
                (
                    "submission_report_download_link_title_nl",
                    models.CharField(
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *("Download PDF",),
                            **{}
                        ),
                        help_text="The title of the link to download the report of a submission.",
                        max_length=128,
                        null=True,
                        verbose_name="submission report download link title",
                    ),
                ),
                (
                    "confirmation_email_content",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/confirmation/content.html",),
                            **{}
                        ),
                        help_text="Content of the confirmation email message. Can be overridden on the form level",
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend",
                                required_template_tags=[
                                    "appointment_information",
                                    "payment_information",
                                    "cosign_information",
                                ],
                            ),
                            openforms.emails.validators.URLSanitationValidator(),
                        ],
                        verbose_name="content",
                    ),
                ),
                (
                    "confirmation_email_content_en",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/confirmation/content.html",),
                            **{}
                        ),
                        help_text="Content of the confirmation email message. Can be overridden on the form level",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend",
                                required_template_tags=[
                                    "appointment_information",
                                    "payment_information",
                                    "cosign_information",
                                ],
                            ),
                            openforms.emails.validators.URLSanitationValidator(),
                        ],
                        verbose_name="content",
                    ),
                ),
                (
                    "confirmation_email_content_nl",
                    tinymce.models.HTMLField(
                        default=functools.partial(
                            openforms.config.models.config._render,
                            *("emails/confirmation/content.html",),
                            **{}
                        ),
                        help_text="Content of the confirmation email message. Can be overridden on the form level",
                        null=True,
                        validators=[
                            openforms.template.validators.DjangoTemplateValidator(
                                backend="openforms.template.openforms_backend",
                                required_template_tags=[
                                    "appointment_information",
                                    "payment_information",
                                    "cosign_information",
                                ],
                            ),
                            openforms.emails.validators.URLSanitationValidator(),
                        ],
                        verbose_name="content",
                    ),
                ),
                (
                    "form_map_default_latitude",
                    models.FloatField(
                        default=52.1326332,
                        validators=[
                            django.core.validators.MinValueValidator(-180.0),
                            django.core.validators.MaxValueValidator(180.0),
                        ],
                        verbose_name="The default latitude for the leaflet map.",
                    ),
                ),
                (
                    "form_map_default_longitude",
                    models.FloatField(
                        default=5.291266,
                        validators=[
                            django.core.validators.MinValueValidator(-90.0),
                            django.core.validators.MaxValueValidator(90.0),
                        ],
                        verbose_name="The default longitude for the leaflet map.",
                    ),
                ),
                (
                    "form_map_default_zoom_level",
                    models.IntegerField(
                        default=13,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(13),
                        ],
                        verbose_name="The default zoom level for the leaflet map.",
                    ),
                ),
                (
                    "ask_statement_of_truth",
                    models.BooleanField(
                        default=False,
                        help_text="If enabled, the user will have to agree that they filled out the form truthfully before submitting it.",
                        verbose_name="ask statement of truth",
                    ),
                ),
                (
                    "statement_of_truth_label",
                    tinymce.models.HTMLField(
                        blank=True,
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *(
                                "I declare that I have filled out the form truthfully and have not omitted any information.",
                            ),
                            **{}
                        ),
                        help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                        verbose_name="statement of truth label",
                    ),
                ),
                (
                    "statement_of_truth_label_en",
                    tinymce.models.HTMLField(
                        blank=True,
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *(
                                "I declare that I have filled out the form truthfully and have not omitted any information.",
                            ),
                            **{}
                        ),
                        help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                        null=True,
                        verbose_name="statement of truth label",
                    ),
                ),
                (
                    "statement_of_truth_label_nl",
                    tinymce.models.HTMLField(
                        blank=True,
                        default=functools.partial(
                            openforms.utils.translations.get_default,
                            *(
                                "I declare that I have filled out the form truthfully and have not omitted any information.",
                            ),
                            **{}
                        ),
                        help_text="The label of the checkbox that prompts the user to agree that they filled out the form truthfully. Note that this field does not have templating support.",
                        null=True,
                        verbose_name="statement of truth label",
                    ),
                ),
                (
                    "show_form_link_in_cosign_email",
                    models.BooleanField(
                        default=True,
                        help_text="When enabled, a link to the form is shown in the co-sign email.",
                        verbose_name="show form link in co-sign email",
                    ),
                ),
                (
                    "recipients_email_digest",
                    django_jsonform.models.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        default=list,
                        help_text="The email addresses that should receive a daily report of items requiring attention.",
                        size=None,
                        verbose_name="recipients email digest",
                    ),
                ),
                (
                    "default_theme",
                    models.OneToOneField(
                        blank=True,
                        help_text="If no explicit theme is configured, the configured default theme will be used as a fallback.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="config.theme",
                        verbose_name="default theme",
                    ),
                ),
                (
                    "wait_for_payment_to_register",
                    models.BooleanField(
                        default=False,
                        help_text="Should a submission be processed (sent to the registration backend) only after payment has been received?",
                        verbose_name="wait for payment to register",
                    ),
                ),
                (
                    "organization_oin",
                    models.CharField(
                        blank=True,
                        help_text="The OIN of the organization.",
                        max_length=20,
                        verbose_name="organization OIN",
                    ),
                ),
            ],
            options={
                "verbose_name": "General configuration",
            },
        ),
    ]
