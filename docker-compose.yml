#
# Docker-compose for full Open Form stack.
#
# DISCLAIMER: THIS IS FOR DEVELOPMENT PURPOSES ONLY AND NOT SUITABLE FOR PRODUCTION.
#
# You can use this docker-compose to spin up a local Open Forms stack for demo/try-out
# purposes, or to get some insight in the various components involved (e.g. to build
# your Helm charts from). Note that various environment variables are UNSAFE and merely
# specified so that you can get up and running with the least amount of friction.
#
# Before deploying to production, please review the environment configuration reference:
# https://open-forms.readthedocs.io/en/latest/installation/config.html
#
version: '3.4'

services:
  db:
    image: postgres:${PG_VERSION:-15}  # Minimum required version is 12
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./docker-init-db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - db:/var/lib/postgresql/data
    networks:
      - open-forms-dev

  redis:
    image: redis:6
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - open-forms-dev
    volumes:
      - data:/data

  smtp:
    image: namshi/smtp
    networks:
      - open-forms-dev

  clamav:
    image: clamav/clamav:1.0.0
    networks:
      - open-forms-dev

  busybox:
    image: busybox
    command: /bin/chown -R 1000 /private-media
    volumes:
      - private_media:/private-media

  web:
    build: &web_build
      context: .
      args:
        RELEASE: ${TAG:-latest}
        SDK_RELEASE: ${SDK_TAG:-latest}
    image: openformulieren/open-forms:${TAG:-latest}
    environment: &web_env
      - DJANGO_SETTINGS_MODULE=openforms.conf.docker
      - SECRET_KEY=${SECRET_KEY:-@r0w-0(&apjfde5fl6h23!vn)r1ldkp1c_d2#!$$did4z5hun4a}
      - DB_NAME=openforms
      - DB_USER=openforms
      - DB_HOST=db
      - CACHE_DEFAULT=redis:6379/0
      - CACHE_AXES=redis:6379/0
      - CACHE_PORTALOCKER=redis:6379/0
      - ALLOWED_HOSTS=*
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_LOGLEVEL=DEBUG
      - OPENFORMS_LOCATION_CLIENT=${OPENFORMS_LOCATION_CLIENT:-openforms.contrib.bag.client.BAGClient}
      - CORS_ALLOW_ALL_ORIGINS=${CORS_ALLOW_ALL_ORIGINS:-true}
      - EMAIL_HOST=smtp
      # Needed for Celery Flower to match the TIME_ZONE configured in the
      # settings used by workers and beat containers.
      - TZ=Europe/Amsterdam
      - CSP_REPORT_ONLY=yes
      # Legacy endpoints are deprecated, new installs should opt-out of using legacy
      # settings (the default is to use legacy endpoints).
      - USE_LEGACY_OIDC_ENDPOINTS=no
      - USE_LEGACY_DIGID_EH_OIDC_ENDPOINTS=no
      - USE_LEGACY_ORG_OIDC_ENDPOINTS=no
      # Environment labeling
      - SHOW_ENVIRONMENT=yes
      - ENVIRONMENT_LABEL=docker-compose
      - ENVIRONMENT_BACKGROUND_COLOR=#1d63ed
      - ENVIRONMENT_FOREGROUND_COLOR=white
      # Django-setup-configuration
      - RUN_SETUP_CONFIG=${RUN_SETUP_CONFIG:-True}
      - SKIP_SELFTEST=${SKIP_SELFTEST:-False}
    volumes: &web_volumes
      - media:/app/media
      - private_media:/app/private_media
      - ./docker/setup_configuration:/app/data
      - log:/app/log
      - certifi_ca_bundle:/app/certifi_ca_bundle
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      smtp:
        condition: service_started
      clamav:
        condition: service_started
      web-init:
        condition: service_completed_successfully
    networks:
      - open-forms-dev

  web-init:
    build: .
    environment: *web_env
    command: /setup_configuration.sh
    volumes: *web_volumes
    depends_on:
      - db
      - redis
    networks:
      - open-forms-dev

  nginx:
    image: nginx
    volumes:
      - ./docker-nginx-default.conf:/etc/nginx/conf.d/default.conf
      - private_media:/private-media
    ports:
      - '9000:80'
    depends_on:
      - web
    networks:
      - open-forms-dev

  celery:
    build: *web_build
    image: openformulieren/open-forms:${TAG:-latest}
    environment: *web_env
    command: /celery_worker.sh
    healthcheck:
      test: ["CMD", "python", "/app/bin/check_celery_worker_liveness.py"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes: *web_volumes
    depends_on:
      - db
      - redis
    networks:
      - open-forms-dev

  celery-beat:
    build: *web_build
    image: openformulieren/open-forms:${TAG:-latest}
    environment: *web_env
    command: /celery_beat.sh
    depends_on:
      - db
      - redis
    networks:
      - open-forms-dev

  celery-flower:
    build: *web_build
    image: openformulieren/open-forms:${TAG:-latest}
    environment: *web_env
    command: /celery_flower.sh
    ports:
      - 5555:5555
    depends_on:
      - redis
      - celery
    networks:
      - open-forms-dev

volumes:
  db:
  media:
  private_media:
  log:
  certifi_ca_bundle:
  data:

networks:
  open-forms-dev:
    name: open-forms-dev
