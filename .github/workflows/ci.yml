name: Run CI

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: openformulieren/open-forms
  DJANGO_SETTINGS_MODULE: openforms.conf.ci

jobs:
  tests:
    name: Run the Django test suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl gettext wget unzip

      - name: Start CI docker services
        run: |
          docker-compose -f docker-compose.ci.yml up -d
        working-directory: docker

      - name: Install dependencies
        run: |
          pip install -r requirements/setuptools.txt
          pip install -r requirements/ci.txt codecov

      - name: Build frontend
        run: |
          npm ci
          npm run build

      - name: Download chrome driver
        run: |
          cd /usr/local/bin
          sudo wget -O webdriver.zip https://chromedriver.storage.googleapis.com/97.0.4692.71/chromedriver_linux64.zip
          sudo unzip webdriver.zip

      - name: Download SDK image
        run: |
          docker pull openformulieren/open-forms-sdk

      - name: Run tests
        run: |
          docker run -d -p 127.0.0.1:8080:8080 openformulieren/open-forms-sdk
          bin/celery_worker.sh
          python src/manage.py compilemessages
          python src/manage.py collectstatic --noinput --link
          coverage run src/manage.py test src
        env:
          SDK_BASE_URL: http://localhost:8080
          DJANGO_SETTINGS_MODULE: openforms.conf.ci
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_PASSWORD: ''

      - name: Publish coverage report
        uses: codecov/codecov-action@v1

      - name: Generate OAS
        run: ./bin/generate_oas.sh openapi.yaml

      - name: Store generated OAS
        uses: actions/upload-artifact@v2
        with:
          name: open-forms-oas
          path: openapi.yaml
          retention-days: 1

  docs:
    name: Build and check documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl

      - name: Install dependencies
        run: |
          pip install -r requirements/setuptools.txt
          pip install -r requirements/ci.txt

      - name: Build and test docs
        working-directory: docs
        run: pytest check_sphinx.py -v --tb=auto

  docker_build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}
          echo ::set-output name=git_hash::${GITHUB_SHA}

      - name: Build the Docker image
        run: |
          docker build . \
            --tag $IMAGE_NAME:$RELEASE_VERSION \
            --build-arg COMMIT_HASH=${{ steps.vars.outputs.git_hash }} \
            --build-arg RELEASE=${RELEASE_VERSION}
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}

      - run: docker image save -o image.tar $IMAGE_NAME:${{ steps.vars.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  oas-up-to-date:
    needs: tests
    name:  Check for unexepected OAS changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download generated OAS
        uses: actions/download-artifact@v2
        with:
          name: open-forms-oas
      - name: Check for OAS changes
        run: |
          diff openapi.yaml src/openapi.yaml

  oas-lint:
    needs: oas-up-to-date
    name:  Validate OAS
    runs-on: ubuntu-latest
    steps:
      - name: Download generated OAS
        uses: actions/download-artifact@v2
        with:
          name: open-forms-oas
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install spectral
        run: npm install -g @stoplight/spectral@5.9.2
      - name: Run OAS linter
        run: spectral lint ./openapi.yaml

  oas-postman:
    needs: oas-up-to-date
    name: Generate Postman collection from OAS
    runs-on: ubuntu-latest
    steps:
      - name: Download generated OAS
        uses: actions/download-artifact@v2
        with:
          name: open-forms-oas
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: npm install -g openapi-to-postmanv2
      - name: Create tests folder
        run: mkdir -p ./tests/postman
      - name: Generate Postman collection
        run: openapi2postmanv2 -s ./openapi.yaml -o ./tests/postman/collection.json --pretty

  oas-generate-sdks:
    needs: oas-up-to-date
    name: Generate SDKs from OAS
    runs-on: ubuntu-latest
    steps:
      - name: Download generated OAS
        uses: actions/download-artifact@v2
        with:
          name: open-forms-oas
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install dependencies
        run: npm install -g @openapitools/openapi-generator-cli@2.4.2
      - name: Validate schema
        run: openapi-generator-cli validate -i ./openapi.yaml
      - name: Generate Java client
        run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
          -o ./sdks/java -g java --additional-properties=dateLibrary=java8,java8=true,optionalProjectFile=false,optionalAssemblyInfo=false
      - name: Generate .NET Core client
        run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
          -o ./sdks/netcore -g csharp-netcore --additional-properties=optionalProjectFile=false,optionalAssemblyInfo=false
      - name: Generate .NET Full Framework client
        run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
          -o ./sdks/net -g csharp --additional-properties=optionalProjectFile=false,optionalAssemblyInfo=false
      - name: Generate Python client
        run: openapi-generator-cli generate -i ./openapi.yaml --global-property=modelTests=false,apiTests=false,modelDocs=false,apiDocs=false \
          -o ./sdks/python -g python --additional-properties=optionalProjectFile=false,optionalAssemblyInfo=false+

  docker_push:
    needs:
      - tests
      - docker_build
      - oas-lint
      - oas-postman
      - oas-generate-sdks

    name: Push Docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Exclude PRs

    steps:
      # This will include the updated OAS (if updated) from the update-oas job.
      - uses: actions/checkout@v2

      - name: Download built image
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Set tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo ::set-output name=tag::${VERSION}

      - name: Load image
        run: |
          docker image load -i image.tar

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push the Docker image
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: docker push $IMAGE_NAME:$RELEASE_VERSION
