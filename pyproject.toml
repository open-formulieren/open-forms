[project]
requires-python = "== 3.12"

[tool.uv.pip]
emit-index-url = false

[tool.bumpversion]
current_version = "3.2.4-alpha.0"
parse = """(?x)
    (?P<major>0|[1-9]\\d*)\\.
    (?P<minor>0|[1-9]\\d*)\\.
    (?P<patch>0|[1-9]\\d*)
    (?:
        -                             # dash separator for pre-release section
        (?P<pre_l>[a-zA-Z-]+)\\.      # pre-release label
        (?P<pre_n>0|[1-9]\\d*)        # pre-release version number
    )?                                # pre-release section is optional
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_l}.{pre_n}",
    "{major}.{minor}.{patch}",
]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "{new_version}"
tag_message = ":bookmark: Bump version to {new_version} and update changelog"
allow_dirty = false
commit = false
message = ":bookmark: Bump version to {new_version} and update changelog"
commit_args = ""
setup_hooks = []
pre_commit_hooks = [
    "npm i",  # ensure that package-lock.json is updated
]
post_commit_hooks = []

[tool.bumpversion.parts.pre_l]
values = ["alpha", "beta", "rc", "final"]
optional_value = "final"

[[tool.bumpversion.files]]
filename = "src/openforms/__init__.py"

[[tool.bumpversion.files]]
filename = "README.rst"
search = ":Version: {current_version}"
replace = ":Version: {new_version}"

[[tool.bumpversion.files]]
filename = "README.NL.rst"
search = ":Version: {current_version}"
replace = ":Version: {new_version}"

[[tool.bumpversion.files]]
filename = "publiccode.yaml"
search = "softwareVersion: {current_version}"
replace = "softwareVersion: {new_version}"

[[tool.bumpversion.files]]
filename = "package.json"
search = "  \"version\": \"{current_version}\""
replace = "  \"version\": \"{new_version}\""

[tool.ruff]
extend-exclude = [
    "static",
    "media",
    "src/openforms/conf/local_example.py",
    # Might be created by developers:
    "src/openforms/conf/local.py",
    "nlx",
]

[tool.ruff.lint]
extend-select = [
    "UP",  # pyupgrade
    # "DJ",  # django
    # "LOG", # logging
    # "G",
    "I",     # isort
    # "E",   # pycodestyle
    "F",     # pyflakes
    # "PERF",# perflint
    "B",     # flake8-bugbear
    # "B904",
    "TID251",# tidy-imports
    "TID253",
]
ignore = [
    "B017",
    "B018",
    "B904",
]

[tool.ruff.lint.isort]
combine-as-imports = true
section-order = [
    "future",
    "standard-library",
    "django",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
"django" = ["django"]

[tool.ruff.lint.flake8-tidy-imports]
banned-module-level-imports = [
    "idna", # IO hit
    "weasyprint",  # IO hit
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"logging".msg = "Use `structlog.stdlib.get_logger(__name__)` instead of the stdlib logging module."
